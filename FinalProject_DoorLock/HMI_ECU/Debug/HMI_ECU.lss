
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003bdc  00003c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800184  00800184  00003d94  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00003d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e4  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000085a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <main>
      8a:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:

/*
 * Timer1 is used to count minutes in overflow mode.
 * after one minute(32 overflows) in normal mode call the call back function
 */
ISR(TIMER1_OVF_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     b70:	80 91 84 01 	lds	r24, 0x0184
     b74:	90 91 85 01 	lds	r25, 0x0185
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_9+0x40>
		g_callBackPtr();
     b7c:	e0 91 84 01 	lds	r30, 0x0184
     b80:	f0 91 85 01 	lds	r31, 0x0185
     b84:	09 95       	icall

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_7>:
/*
 * Timer1 is used to count seconds in CTC mode.
 * ORCR1A = TICKS_PER_ONE_SECOND
 */
ISR(TIMER1_COMPA_vect){
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr!=NULL_PTR)
     bd6:	80 91 84 01 	lds	r24, 0x0184
     bda:	90 91 85 01 	lds	r25, 0x0185
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_7+0x40>
		g_callBackPtr();
     be2:	e0 91 84 01 	lds	r30, 0x0184
     be6:	f0 91 85 01 	lds	r31, 0x0185
     bea:	09 95       	icall
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer1_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
     c20:	ac e4       	ldi	r26, 0x4C	; 76
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	9c 93       	st	X, r25
     c30:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == normal_mode){
     c32:	e9 81       	ldd	r30, Y+1	; 0x01
     c34:	fa 81       	ldd	r31, Y+2	; 0x02
     c36:	85 81       	ldd	r24, Z+5	; 0x05
     c38:	88 23       	and	r24, r24
     c3a:	39 f4       	brne	.+14     	; 0xc4a <Timer1_init+0x38>
		TIMSK |= (1<<TOIE1);
     c3c:	a9 e5       	ldi	r26, 0x59	; 89
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e9 e5       	ldi	r30, 0x59	; 89
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	84 60       	ori	r24, 0x04	; 4
     c48:	8c 93       	st	X, r24
	}
	/*compare value is only used in compare mode*/
	if (Config_Ptr->mode == CTC_mode){
     c4a:	e9 81       	ldd	r30, Y+1	; 0x01
     c4c:	fa 81       	ldd	r31, Y+2	; 0x02
     c4e:	85 81       	ldd	r24, Z+5	; 0x05
     c50:	84 30       	cpi	r24, 0x04	; 4
     c52:	81 f4       	brne	.+32     	; 0xc74 <Timer1_init+0x62>
		OCR1A = Config_Ptr->compare_value;
     c54:	aa e4       	ldi	r26, 0x4A	; 74
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e9 81       	ldd	r30, Y+1	; 0x01
     c5a:	fa 81       	ldd	r31, Y+2	; 0x02
     c5c:	82 81       	ldd	r24, Z+2	; 0x02
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	9c 93       	st	X, r25
     c64:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
     c66:	a9 e5       	ldi	r26, 0x59	; 89
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e9 e5       	ldi	r30, 0x59	; 89
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	8c 93       	st	X, r24
	}
	/*
	 * set the pre-scaler value.
	 * set WGM12 value.
	 * */
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode<<1)&0x08);
     c74:	ae e4       	ldi	r26, 0x4E	; 78
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e9 81       	ldd	r30, Y+1	; 0x01
     c7a:	fa 81       	ldd	r31, Y+2	; 0x02
     c7c:	84 81       	ldd	r24, Z+4	; 0x04
     c7e:	28 2f       	mov	r18, r24
     c80:	e9 81       	ldd	r30, Y+1	; 0x01
     c82:	fa 81       	ldd	r31, Y+2	; 0x02
     c84:	85 81       	ldd	r24, Z+5	; 0x05
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 70       	andi	r24, 0x08	; 8
     c90:	82 2b       	or	r24, r18
     c92:	8c 93       	st	X, r24
	/*set WGM10 and WGM11 values.*/
	TCCR1A =  (1<<FOC1A) | (1<<FOC1B) |(1<<COM1A1) ;
     c94:	ef e4       	ldi	r30, 0x4F	; 79
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	8c e8       	ldi	r24, 0x8C	; 140
     c9a:	80 83       	st	Z, r24

}
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <Timer1_setCallBack+0x6>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	90 93 85 01 	sts	0x0185, r25
     cbc:	80 93 84 01 	sts	0x0184, r24
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <Timer1_deInit>:


/*clear all timer1 registers to disable it*/
void Timer1_deInit(void) {
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     cd2:	ec e4       	ldi	r30, 0x4C	; 76
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	11 82       	std	Z+1, r1	; 0x01
     cd8:	10 82       	st	Z, r1
	OCR1A = 0;
     cda:	ea e4       	ldi	r30, 0x4A	; 74
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	11 82       	std	Z+1, r1	; 0x01
     ce0:	10 82       	st	Z, r1
	TCCR1B = 0;
     ce2:	ee e4       	ldi	r30, 0x4E	; 78
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	10 82       	st	Z, r1
	TCCR1A = 0;
     ce8:	ef e4       	ldi	r30, 0x4F	; 79
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	10 82       	st	Z, r1
}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <UART_init>:
#include "UART.h"

#include <avr/io.h>
#include "common_macros.h"

void UART_init(UART_ConfigType * config_ptr){
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <UART_init+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <UART_init+0x8>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = (1<<U2X);
     d04:	eb e2       	ldi	r30, 0x2B	; 43
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 83       	st	Z, r24
	UCSRB = (1<<TXEN) | (1<<RXEN)  | (config_ptr->bit_data&0x04);
     d0c:	aa e2       	ldi	r26, 0x2A	; 42
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb 81       	ldd	r30, Y+3	; 0x03
     d12:	fc 81       	ldd	r31, Y+4	; 0x04
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	84 70       	andi	r24, 0x04	; 4
     d18:	88 61       	ori	r24, 0x18	; 24
     d1a:	8c 93       	st	X, r24
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) |(config_ptr->stop_bit<<3) | ((config_ptr->parity&0x03)<<4) | ((config_ptr->bit_data&0x03)<<1);
     d1c:	a0 e4       	ldi	r26, 0x40	; 64
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	eb 81       	ldd	r30, Y+3	; 0x03
     d22:	fc 81       	ldd	r31, Y+4	; 0x04
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	28 2f       	mov	r18, r24
     d38:	26 68       	ori	r18, 0x86	; 134
     d3a:	eb 81       	ldd	r30, Y+3	; 0x03
     d3c:	fc 81       	ldd	r31, Y+4	; 0x04
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	83 70       	andi	r24, 0x03	; 3
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	82 95       	swap	r24
     d4a:	92 95       	swap	r25
     d4c:	90 7f       	andi	r25, 0xF0	; 240
     d4e:	98 27       	eor	r25, r24
     d50:	80 7f       	andi	r24, 0xF0	; 240
     d52:	98 27       	eor	r25, r24
     d54:	28 2b       	or	r18, r24
     d56:	eb 81       	ldd	r30, Y+3	; 0x03
     d58:	fc 81       	ldd	r31, Y+4	; 0x04
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	83 70       	andi	r24, 0x03	; 3
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	82 2b       	or	r24, r18
     d6a:	8c 93       	st	X, r24
	uint16 ubrr_val = (uint16)((F_CPU/(8UL*config_ptr->baud_rate))-1);
     d6c:	eb 81       	ldd	r30, Y+3	; 0x03
     d6e:	fc 81       	ldd	r31, Y+4	; 0x04
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	cc 01       	movw	r24, r24
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	aa 1f       	adc	r26, r26
     d88:	bb 1f       	adc	r27, r27
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	aa 1f       	adc	r26, r26
     d90:	bb 1f       	adc	r27, r27
     d92:	9c 01       	movw	r18, r24
     d94:	ad 01       	movw	r20, r26
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	92 e1       	ldi	r25, 0x12	; 18
     d9a:	aa e7       	ldi	r26, 0x7A	; 122
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__udivmodsi4>
     da6:	da 01       	movw	r26, r20
     da8:	c9 01       	movw	r24, r18
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_val>>8;
     db0:	e0 e4       	ldi	r30, 0x40	; 64
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	89 2f       	mov	r24, r25
     dba:	99 27       	eor	r25, r25
     dbc:	80 83       	st	Z, r24
	UBRRL = ubrr_val;
     dbe:	e9 e2       	ldi	r30, 0x29	; 41
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	80 83       	st	Z, r24

}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data){
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
	//wait until the last data is shifted out and the transmit buffer is ready to receive new data.
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     de0:	eb e2       	ldi	r30, 0x2B	; 43
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	80 72       	andi	r24, 0x20	; 32
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	b9 f3       	breq	.-18     	; 0xde0 <UART_sendByte+0xc>
	/*
	 * put the required data in the transmit buffer (UDR).
	 * it clears UDRE bit.
	 */
	UDR = data;
     df2:	ec e2       	ldi	r30, 0x2C	; 44
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	80 83       	st	Z, r24
}
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <UART_receiveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void){
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
//	wait until there is a new data IS received in the receive buffer
	while(BIT_IS_CLEAR(UCSRA,RXC));
     e0a:	eb e2       	ldi	r30, 0x2B	; 43
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	88 23       	and	r24, r24
     e12:	dc f7       	brge	.-10     	; 0xe0a <UART_receiveByte+0x8>
	// save data, the RXC will be cleared after reading the data
	return UDR;
     e14:	ec e2       	ldi	r30, 0x2C	; 44
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <UART_sendString+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <UART_sendString+0x32>
	while(Str[i]!='\0'){
		// send byte by byte
		UART_sendByte(Str[i++]);
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	fc 01       	movw	r30, r24
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	90 81       	ld	r25, Z
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	89 2f       	mov	r24, r25
     e4e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	uint8 i =0;
	while(Str[i]!='\0'){
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	fc 01       	movw	r30, r24
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	80 81       	ld	r24, Z
     e64:	88 23       	and	r24, r24
     e66:	31 f7       	brne	.-52     	; 0xe34 <UART_sendString+0x14>
		// send byte by byte
		UART_sendByte(Str[i++]);
	}
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <UART_receiveString+0xa>
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9b 83       	std	Y+3, r25	; 0x03
     e86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e88:	19 82       	std	Y+1, r1	; 0x01
	// receive first byte
	Str[i] = UART_receiveByte();
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	8c 01       	movw	r16, r24
     e96:	02 0f       	add	r16, r18
     e98:	13 1f       	adc	r17, r19
     e9a:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_receiveByte>
     e9e:	f8 01       	movw	r30, r16
     ea0:	80 83       	st	Z, r24
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <UART_receiveString+0x4e>
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
		i++;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	8c 01       	movw	r16, r24
     eb6:	02 0f       	add	r16, r18
     eb8:	13 1f       	adc	r17, r19
     eba:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_receiveByte>
     ebe:	f8 01       	movw	r30, r16
     ec0:	80 83       	st	Z, r24
void UART_receiveString(uint8 *Str){
	uint8 i = 0;
	// receive first byte
	Str[i] = UART_receiveByte();
	// check if the received byte is not #, if true store the byte in the string
	while(Str[i]!='#'){
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	fc 01       	movw	r30, r24
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	80 81       	ld	r24, Z
     ed4:	83 32       	cpi	r24, 0x23	; 35
     ed6:	31 f7       	brne	.-52     	; 0xea4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}
	// after receiving the string add null instead of # symbol
	Str[i] = '\0';
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	10 82       	st	Z, r1
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <GPIO_setupPinDirection+0x6>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <GPIO_setupPinDirection+0x8>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	6a 83       	std	Y+2, r22	; 0x02
     f0c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_setupPinDirection+0x1c>
     f14:	d5 c0       	rjmp	.+426    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	84 30       	cpi	r24, 0x04	; 4
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <GPIO_setupPinDirection+0x24>
     f1c:	d1 c0       	rjmp	.+418    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3d 83       	std	Y+5, r19	; 0x05
     f26:	2c 83       	std	Y+4, r18	; 0x04
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <GPIO_setupPinDirection+0x3a>
     f32:	43 c0       	rjmp	.+134    	; 0xfba <GPIO_setupPinDirection+0xc0>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <GPIO_setupPinDirection+0x4e>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	71 f0       	breq	.+28     	; 0xf62 <GPIO_setupPinDirection+0x68>
     f46:	bc c0       	rjmp	.+376    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
     f48:	2c 81       	ldd	r18, Y+4	; 0x04
     f4a:	3d 81       	ldd	r19, Y+5	; 0x05
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_setupPinDirection+0x5a>
     f52:	5f c0       	rjmp	.+190    	; 0x1012 <GPIO_setupPinDirection+0x118>
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <GPIO_setupPinDirection+0x66>
     f5e:	85 c0       	rjmp	.+266    	; 0x106a <GPIO_setupPinDirection+0x170>
     f60:	af c0       	rjmp	.+350    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f68:	aa e3       	ldi	r26, 0x3A	; 58
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea e3       	ldi	r30, 0x3A	; 58
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_setupPinDirection+0x8c>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_setupPinDirection+0x88>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	98 c0       	rjmp	.+304    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f90:	aa e3       	ldi	r26, 0x3A	; 58
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e3       	ldi	r30, 0x3A	; 58
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_setupPinDirection+0xb4>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_setupPinDirection+0xb0>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	83 c0       	rjmp	.+262    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_setupPinDirection+0xe4>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_setupPinDirection+0xe0>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	6c c0       	rjmp	.+216    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fe8:	a7 e3       	ldi	r26, 0x37	; 55
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e7 e3       	ldi	r30, 0x37	; 55
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <GPIO_setupPinDirection+0x10c>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <GPIO_setupPinDirection+0x108>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	57 c0       	rjmp	.+174    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	a1 f4       	brne	.+40     	; 0x1040 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1018:	a4 e3       	ldi	r26, 0x34	; 52
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e3       	ldi	r30, 0x34	; 52
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x13c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x138>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	40 c0       	rjmp	.+128    	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_setupPinDirection+0x164>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_setupPinDirection+0x160>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	2b c0       	rjmp	.+86     	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1070:	a1 e3       	ldi	r26, 0x31	; 49
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0x194>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0x190>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	14 c0       	rjmp	.+40     	; 0x10c0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_setupPinDirection+0x1bc>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_setupPinDirection+0x1b8>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <GPIO_writePin+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <GPIO_writePin+0x8>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <GPIO_writePin+0x1c>
    10ea:	d5 c0       	rjmp	.+426    	; 0x1296 <GPIO_writePin+0x1c6>
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <GPIO_writePin+0x24>
    10f2:	d1 c0       	rjmp	.+418    	; 0x1296 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 83       	std	Y+5, r19	; 0x05
    10fc:	2c 83       	std	Y+4, r18	; 0x04
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <GPIO_writePin+0x3a>
    1108:	43 c0       	rjmp	.+134    	; 0x1190 <GPIO_writePin+0xc0>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <GPIO_writePin+0x4e>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	71 f0       	breq	.+28     	; 0x1138 <GPIO_writePin+0x68>
    111c:	bc c0       	rjmp	.+376    	; 0x1296 <GPIO_writePin+0x1c6>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <GPIO_writePin+0x5a>
    1128:	5f c0       	rjmp	.+190    	; 0x11e8 <GPIO_writePin+0x118>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <GPIO_writePin+0x66>
    1134:	85 c0       	rjmp	.+266    	; 0x1240 <GPIO_writePin+0x170>
    1136:	af c0       	rjmp	.+350    	; 0x1296 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	a1 f4       	brne	.+40     	; 0x1166 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_writePin+0x8c>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_writePin+0x88>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	98 c0       	rjmp	.+304    	; 0x1296 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1166:	ab e3       	ldi	r26, 0x3B	; 59
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	eb e3       	ldi	r30, 0x3B	; 59
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_writePin+0xb4>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_writePin+0xb0>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	83 c0       	rjmp	.+262    	; 0x1296 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	a1 f4       	brne	.+40     	; 0x11be <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1196:	a8 e3       	ldi	r26, 0x38	; 56
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e3       	ldi	r30, 0x38	; 56
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_writePin+0xe4>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_writePin+0xe0>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	6c c0       	rjmp	.+216    	; 0x1296 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11be:	a8 e3       	ldi	r26, 0x38	; 56
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e8 e3       	ldi	r30, 0x38	; 56
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_writePin+0x10c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_writePin+0x108>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	57 c0       	rjmp	.+174    	; 0x1296 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11ee:	a5 e3       	ldi	r26, 0x35	; 53
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_writePin+0x13c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_writePin+0x138>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	40 c0       	rjmp	.+128    	; 0x1296 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1216:	a5 e3       	ldi	r26, 0x35	; 53
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e3       	ldi	r30, 0x35	; 53
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_writePin+0x164>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_writePin+0x160>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	2b c0       	rjmp	.+86     	; 0x1296 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1246:	a2 e3       	ldi	r26, 0x32	; 50
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_writePin+0x194>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_writePin+0x190>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    126e:	a2 e3       	ldi	r26, 0x32	; 50
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e2 e3       	ldi	r30, 0x32	; 50
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0x1bc>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0x1b8>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_readPin+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <GPIO_readPin+0x8>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    12b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12b8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <GPIO_readPin+0x1c>
    12c0:	84 c0       	rjmp	.+264    	; 0x13ca <GPIO_readPin+0x124>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <GPIO_readPin+0x24>
    12c8:	80 c0       	rjmp	.+256    	; 0x13ca <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	4c 81       	ldd	r20, Y+4	; 0x04
    12d6:	5d 81       	ldd	r21, Y+5	; 0x05
    12d8:	41 30       	cpi	r20, 0x01	; 1
    12da:	51 05       	cpc	r21, r1
    12dc:	79 f1       	breq	.+94     	; 0x133c <GPIO_readPin+0x96>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	82 30       	cpi	r24, 0x02	; 2
    12e4:	91 05       	cpc	r25, r1
    12e6:	34 f4       	brge	.+12     	; 0x12f4 <GPIO_readPin+0x4e>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	21 15       	cp	r18, r1
    12ee:	31 05       	cpc	r19, r1
    12f0:	69 f0       	breq	.+26     	; 0x130c <GPIO_readPin+0x66>
    12f2:	6b c0       	rjmp	.+214    	; 0x13ca <GPIO_readPin+0x124>
    12f4:	4c 81       	ldd	r20, Y+4	; 0x04
    12f6:	5d 81       	ldd	r21, Y+5	; 0x05
    12f8:	42 30       	cpi	r20, 0x02	; 2
    12fa:	51 05       	cpc	r21, r1
    12fc:	b9 f1       	breq	.+110    	; 0x136c <GPIO_readPin+0xc6>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <GPIO_readPin+0x64>
    1308:	49 c0       	rjmp	.+146    	; 0x139c <GPIO_readPin+0xf6>
    130a:	5f c0       	rjmp	.+190    	; 0x13ca <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    130c:	e9 e3       	ldi	r30, 0x39	; 57
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a9 01       	movw	r20, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_readPin+0x7e>
    1320:	55 95       	asr	r21
    1322:	47 95       	ror	r20
    1324:	8a 95       	dec	r24
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_readPin+0x7a>
    1328:	ca 01       	movw	r24, r20
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	88 23       	and	r24, r24
    1330:	19 f0       	breq	.+6      	; 0x1338 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	49 c0       	rjmp	.+146    	; 0x13ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1338:	19 82       	std	Y+1, r1	; 0x01
    133a:	47 c0       	rjmp	.+142    	; 0x13ca <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    133c:	e6 e3       	ldi	r30, 0x36	; 54
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_readPin+0xae>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_readPin+0xaa>
    1358:	ca 01       	movw	r24, r20
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	90 70       	andi	r25, 0x00	; 0
    135e:	88 23       	and	r24, r24
    1360:	19 f0       	breq	.+6      	; 0x1368 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	31 c0       	rjmp	.+98     	; 0x13ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1368:	19 82       	std	Y+1, r1	; 0x01
    136a:	2f c0       	rjmp	.+94     	; 0x13ca <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    136c:	e3 e3       	ldi	r30, 0x33	; 51
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_readPin+0xde>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_readPin+0xda>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	88 23       	and	r24, r24
    1390:	19 f0       	breq	.+6      	; 0x1398 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	19 c0       	rjmp	.+50     	; 0x13ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1398:	19 82       	std	Y+1, r1	; 0x01
    139a:	17 c0       	rjmp	.+46     	; 0x13ca <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    139c:	e0 e3       	ldi	r30, 0x30	; 48
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <GPIO_readPin+0x10e>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <GPIO_readPin+0x10a>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 23       	and	r24, r24
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13c8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <GPIO_setupPortDirection+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <GPIO_setupPortDirection+0x8>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	90 f5       	brcc	.+100    	; 0x1456 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3c 83       	std	Y+4, r19	; 0x04
    13fa:	2b 83       	std	Y+3, r18	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	d1 f0       	breq	.+52     	; 0x143a <GPIO_setupPortDirection+0x5e>
    1406:	2b 81       	ldd	r18, Y+3	; 0x03
    1408:	3c 81       	ldd	r19, Y+4	; 0x04
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	2c f4       	brge	.+10     	; 0x141a <GPIO_setupPortDirection+0x3e>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	61 f0       	breq	.+24     	; 0x1430 <GPIO_setupPortDirection+0x54>
    1418:	1e c0       	rjmp	.+60     	; 0x1456 <GPIO_setupPortDirection+0x7a>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	81 f0       	breq	.+32     	; 0x1444 <GPIO_setupPortDirection+0x68>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	81 f0       	breq	.+32     	; 0x144e <GPIO_setupPortDirection+0x72>
    142e:	13 c0       	rjmp	.+38     	; 0x1456 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	80 83       	st	Z, r24
    1438:	0e c0       	rjmp	.+28     	; 0x1456 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    143a:	e7 e3       	ldi	r30, 0x37	; 55
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 83       	st	Z, r24
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1444:	e4 e3       	ldi	r30, 0x34	; 52
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	80 83       	st	Z, r24
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    144e:	e1 e3       	ldi	r30, 0x31	; 49
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	80 83       	st	Z, r24
			break;
		}
	}
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <GPIO_writePort+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <GPIO_writePort+0x8>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	90 f5       	brcc	.+100    	; 0x14de <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	d1 f0       	breq	.+52     	; 0x14c2 <GPIO_writePort+0x5e>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	2c f4       	brge	.+10     	; 0x14a2 <GPIO_writePort+0x3e>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	61 f0       	breq	.+24     	; 0x14b8 <GPIO_writePort+0x54>
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <GPIO_writePort+0x7a>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <GPIO_writePort+0x68>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <GPIO_writePort+0x72>
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14c2:	e8 e3       	ldi	r30, 0x38	; 56
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14cc:	e5 e3       	ldi	r30, 0x35	; 53
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14d6:	e2 e3       	ldi	r30, 0x32	; 50
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <GPIO_readPort+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_readPort+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14fa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	90 f5       	brcc	.+100    	; 0x1566 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c 83       	std	Y+4, r19	; 0x04
    150a:	2b 83       	std	Y+3, r18	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <GPIO_readPort+0x5e>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <GPIO_readPort+0x3e>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <GPIO_readPort+0x54>
    1528:	1e c0       	rjmp	.+60     	; 0x1566 <GPIO_readPort+0x7a>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <GPIO_readPort+0x68>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <GPIO_readPort+0x72>
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1540:	e9 e3       	ldi	r30, 0x39	; 57
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    154a:	e6 e3       	ldi	r30, 0x36	; 54
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1554:	e3 e3       	ldi	r30, 0x33	; 51
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    155e:	e0 e3       	ldi	r30, 0x30	; 48
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <KEYPAD_getPressedKey>:
#endif /* STANDARD_KEYPAD */



uint8 KEYPAD_getPressedKey(void)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	60 97       	sbiw	r28, 0x10	; 16
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	64 e0       	ldi	r22, 0x04	; 4
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	65 e0       	ldi	r22, 0x05	; 5
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	66 e0       	ldi	r22, 0x06	; 6
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	67 e0       	ldi	r22, 0x07	; 7
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	62 e0       	ldi	r22, 0x02	; 2
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	63 e0       	ldi	r22, 0x03	; 3
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    15c6:	83 e0       	ldi	r24, 0x03	; 3
    15c8:	64 e0       	ldi	r22, 0x04	; 4
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	65 e0       	ldi	r22, 0x05	; 5
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    15da:	1f 86       	std	Y+15, r1	; 0x0f
    15dc:	b4 c0       	rjmp	.+360    	; 0x1746 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 2f       	mov	r25, r24
    15e2:	9c 5f       	subi	r25, 0xFC	; 252
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	69 2f       	mov	r22, r25
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	98 2f       	mov	r25, r24
    15f2:	9c 5f       	subi	r25, 0xFC	; 252
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	69 2f       	mov	r22, r25
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15fe:	18 8a       	std	Y+16, r1	; 0x10
    1600:	22 c0       	rjmp	.+68     	; 0x1646 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	98 2f       	mov	r25, r24
    1606:	9e 5f       	subi	r25, 0xFE	; 254
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	69 2f       	mov	r22, r25
    160c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_readPin>
    1610:	88 23       	and	r24, r24
    1612:	b1 f4       	brne	.+44     	; 0x1640 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	98 2f       	mov	r25, r24
    1624:	88 89       	ldd	r24, Y+16	; 0x10
    1626:	89 0f       	add	r24, r25
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    162e:	60 96       	adiw	r28, 0x10	; 16
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1640:	88 89       	ldd	r24, Y+16	; 0x10
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	88 8b       	std	Y+16, r24	; 0x10
    1646:	88 89       	ldd	r24, Y+16	; 0x10
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	d8 f2       	brcs	.-74     	; 0x1602 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	98 2f       	mov	r25, r24
    1650:	9c 5f       	subi	r25, 0xFC	; 252
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	69 2f       	mov	r22, r25
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 ea       	ldi	r26, 0xA0	; 160
    1662:	b0 e4       	ldi	r27, 0x40	; 64
    1664:	8b 87       	std	Y+11, r24	; 0x0b
    1666:	9c 87       	std	Y+12, r25	; 0x0c
    1668:	ad 87       	std	Y+13, r26	; 0x0d
    166a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	6b 85       	ldd	r22, Y+11	; 0x0b
    166e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1670:	8d 85       	ldd	r24, Y+13	; 0x0d
    1672:	9e 85       	ldd	r25, Y+14	; 0x0e
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	4a ef       	ldi	r20, 0xFA	; 250
    167a:	54 e4       	ldi	r21, 0x44	; 68
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8f 83       	std	Y+7, r24	; 0x07
    1686:	98 87       	std	Y+8, r25	; 0x08
    1688:	a9 87       	std	Y+9, r26	; 0x09
    168a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	2c f4       	brge	.+10     	; 0x16ae <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	4c f5       	brge	.+82     	; 0x1718 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    16cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <KEYPAD_getPressedKey+0x198>
    16f0:	88 ec       	ldi	r24, 0xC8	; 200
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <KEYPAD_getPressedKey+0x186>
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f7       	brne	.-38     	; 0x16f0 <KEYPAD_getPressedKey+0x17a>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <KEYPAD_getPressedKey+0x1c2>
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1740:	8f 85       	ldd	r24, Y+15	; 0x0f
    1742:	8f 5f       	subi	r24, 0xFF	; 255
    1744:	8f 87       	std	Y+15, r24	; 0x0f
    1746:	8f 85       	ldd	r24, Y+15	; 0x0f
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	08 f4       	brcc	.+2      	; 0x174e <KEYPAD_getPressedKey+0x1d8>
    174c:	48 cf       	rjmp	.-368    	; 0x15de <KEYPAD_getPressedKey+0x68>
    174e:	45 cf       	rjmp	.-374    	; 0x15da <KEYPAD_getPressedKey+0x64>

00001750 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    175e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3c 83       	std	Y+4, r19	; 0x04
    1768:	2b 83       	std	Y+3, r18	; 0x03
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	88 30       	cpi	r24, 0x08	; 8
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1774:	70 c0       	rjmp	.+224    	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	29 30       	cpi	r18, 0x09	; 9
    177c:	31 05       	cpc	r19, r1
    177e:	5c f5       	brge	.+86     	; 0x17d6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    178a:	59 c0       	rjmp	.+178    	; 0x183e <KEYPAD_4x4_adjustKeyNumber+0xee>
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	25 30       	cpi	r18, 0x05	; 5
    1792:	31 05       	cpc	r19, r1
    1794:	9c f4       	brge	.+38     	; 0x17bc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17a0:	48 c0       	rjmp	.+144    	; 0x1832 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17a2:	2b 81       	ldd	r18, Y+3	; 0x03
    17a4:	3c 81       	ldd	r19, Y+4	; 0x04
    17a6:	23 30       	cpi	r18, 0x03	; 3
    17a8:	31 05       	cpc	r19, r1
    17aa:	0c f0       	brlt	.+2      	; 0x17ae <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17ac:	45 c0       	rjmp	.+138    	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <KEYPAD_4x4_adjustKeyNumber+0x6a>
    17b8:	39 c0       	rjmp	.+114    	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    17ba:	67 c0       	rjmp	.+206    	; 0x188a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	26 30       	cpi	r18, 0x06	; 6
    17c2:	31 05       	cpc	r19, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    17c6:	41 c0       	rjmp	.+130    	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	87 30       	cpi	r24, 0x07	; 7
    17ce:	91 05       	cpc	r25, r1
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    17d2:	3e c0       	rjmp	.+124    	; 0x1850 <KEYPAD_4x4_adjustKeyNumber+0x100>
    17d4:	37 c0       	rjmp	.+110    	; 0x1844 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	2c 30       	cpi	r18, 0x0C	; 12
    17dc:	31 05       	cpc	r19, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    17e0:	46 c0       	rjmp	.+140    	; 0x186e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	8d 30       	cpi	r24, 0x0D	; 13
    17e8:	91 05       	cpc	r25, r1
    17ea:	5c f4       	brge	.+22     	; 0x1802 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	2a 30       	cpi	r18, 0x0A	; 10
    17f2:	31 05       	cpc	r19, r1
    17f4:	b1 f1       	breq	.+108    	; 0x1862 <KEYPAD_4x4_adjustKeyNumber+0x112>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	8b 30       	cpi	r24, 0x0B	; 11
    17fc:	91 05       	cpc	r25, r1
    17fe:	a4 f5       	brge	.+104    	; 0x1868 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1800:	2d c0       	rjmp	.+90     	; 0x185c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	3c 81       	ldd	r19, Y+4	; 0x04
    1806:	2e 30       	cpi	r18, 0x0E	; 14
    1808:	31 05       	cpc	r19, r1
    180a:	b9 f1       	breq	.+110    	; 0x187a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	8e 30       	cpi	r24, 0x0E	; 14
    1812:	91 05       	cpc	r25, r1
    1814:	7c f1       	brlt	.+94     	; 0x1874 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1816:	2b 81       	ldd	r18, Y+3	; 0x03
    1818:	3c 81       	ldd	r19, Y+4	; 0x04
    181a:	2f 30       	cpi	r18, 0x0F	; 15
    181c:	31 05       	cpc	r19, r1
    181e:	79 f1       	breq	.+94     	; 0x187e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	80 31       	cpi	r24, 0x10	; 16
    1826:	91 05       	cpc	r25, r1
    1828:	69 f1       	breq	.+90     	; 0x1884 <KEYPAD_4x4_adjustKeyNumber+0x134>
    182a:	2f c0       	rjmp	.+94     	; 0x188a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    182c:	87 e0       	ldi	r24, 0x07	; 7
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	2e c0       	rjmp	.+92     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1832:	88 e0       	ldi	r24, 0x08	; 8
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	2b c0       	rjmp	.+86     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1838:	89 e0       	ldi	r24, 0x09	; 9
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	28 c0       	rjmp	.+80     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    183e:	85 e2       	ldi	r24, 0x25	; 37
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	25 c0       	rjmp	.+74     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1844:	84 e0       	ldi	r24, 0x04	; 4
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	22 c0       	rjmp	.+68     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    184a:	85 e0       	ldi	r24, 0x05	; 5
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	1f c0       	rjmp	.+62     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	1c c0       	rjmp	.+56     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1856:	8a e2       	ldi	r24, 0x2A	; 42
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	19 c0       	rjmp	.+50     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	16 c0       	rjmp	.+44     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	13 c0       	rjmp	.+38     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	10 c0       	rjmp	.+32     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    186e:	8d e2       	ldi	r24, 0x2D	; 45
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	0d c0       	rjmp	.+26     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1874:	8d e0       	ldi	r24, 0x0D	; 13
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	0a c0       	rjmp	.+20     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	08 c0       	rjmp	.+16     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	05 c0       	rjmp	.+10     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1884:	8b e2       	ldi	r24, 0x2B	; 43
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	02 c0       	rjmp	.+4      	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	2e 97       	sbiw	r28, 0x0e	; 14
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 7d 07 	call	0xefa	; 0xefa <GPIO_setupPinDirection>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 ea       	ldi	r26, 0xA0	; 160
    18cc:	b1 e4       	ldi	r27, 0x41	; 65
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
    18d2:	ad 87       	std	Y+13, r26	; 0x0d
    18d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    18f0:	98 87       	std	Y+8, r25	; 0x08
    18f2:	a9 87       	std	Y+9, r26	; 0x09
    18f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_init+0x7a>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_init+0xda>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_init+0xc8>
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <LCD_init+0xbc>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_init+0x104>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	6f ef       	ldi	r22, 0xFF	; 255
    19ae:	0e 94 ee 09 	call	0x13dc	; 0x13dc <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    19b2:	88 e3       	ldi	r24, 0x38	; 56
    19b4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19b8:	8c e0       	ldi	r24, 0x0C	; 12
    19ba:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_sendCommand>
}
    19c4:	2e 96       	adiw	r28, 0x0e	; 14
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	e9 97       	sbiw	r28, 0x39	; 57
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	8d ab       	std	Y+53, r24	; 0x35
    1a00:	9e ab       	std	Y+54, r25	; 0x36
    1a02:	af ab       	std	Y+55, r26	; 0x37
    1a04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6d a9       	ldd	r22, Y+53	; 0x35
    1a08:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a ef       	ldi	r20, 0xFA	; 250
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	89 ab       	std	Y+49, r24	; 0x31
    1a20:	9a ab       	std	Y+50, r25	; 0x32
    1a22:	ab ab       	std	Y+51, r26	; 0x33
    1a24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a26:	69 a9       	ldd	r22, Y+49	; 0x31
    1a28:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_sendCommand+0x72>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 ab       	std	Y+48, r25	; 0x30
    1a44:	8f a7       	std	Y+47, r24	; 0x2f
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1a48:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6d a9       	ldd	r22, Y+53	; 0x35
    1a62:	7e a9       	ldd	r23, Y+54	; 0x36
    1a64:	8f a9       	ldd	r24, Y+55	; 0x37
    1a66:	98 ad       	ldd	r25, Y+56	; 0x38
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	98 ab       	std	Y+48, r25	; 0x30
    1a86:	8f a7       	std	Y+47, r24	; 0x2f
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_sendCommand+0xd2>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e a7       	std	Y+46, r25	; 0x2e
    1a90:	8d a7       	std	Y+45, r24	; 0x2d
    1a92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_sendCommand+0xc0>
    1a9a:	9e a7       	std	Y+46, r25	; 0x2e
    1a9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_sendCommand+0xb4>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	98 ab       	std	Y+48, r25	; 0x30
    1ac4:	8f a7       	std	Y+47, r24	; 0x2f
    1ac6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aca:	9c a7       	std	Y+44, r25	; 0x2c
    1acc:	8b a7       	std	Y+43, r24	; 0x2b
    1ace:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_sendCommand+0xfc>
    1ad6:	9c a7       	std	Y+44, r25	; 0x2c
    1ad8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	8f a3       	std	Y+39, r24	; 0x27
    1aee:	98 a7       	std	Y+40, r25	; 0x28
    1af0:	a9 a7       	std	Y+41, r26	; 0x29
    1af2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6f a1       	ldd	r22, Y+39	; 0x27
    1af6:	78 a5       	ldd	r23, Y+40	; 0x28
    1af8:	89 a5       	ldd	r24, Y+41	; 0x29
    1afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8b a3       	std	Y+35, r24	; 0x23
    1b0e:	9c a3       	std	Y+36, r25	; 0x24
    1b10:	ad a3       	std	Y+37, r26	; 0x25
    1b12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_sendCommand+0x160>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9a a3       	std	Y+34, r25	; 0x22
    1b32:	89 a3       	std	Y+33, r24	; 0x21
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b50:	78 a5       	ldd	r23, Y+40	; 0x28
    1b52:	89 a5       	ldd	r24, Y+41	; 0x29
    1b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9a a3       	std	Y+34, r25	; 0x22
    1b74:	89 a3       	std	Y+33, r24	; 0x21
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_sendCommand+0x1c0>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	98 a3       	std	Y+32, r25	; 0x20
    1b7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b82:	98 a1       	ldd	r25, Y+32	; 0x20
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_sendCommand+0x1ae>
    1b88:	98 a3       	std	Y+32, r25	; 0x20
    1b8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9a a3       	std	Y+34, r25	; 0x22
    1b94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	89 a1       	ldd	r24, Y+33	; 0x21
    1b98:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_sendCommand+0x1a2>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
    1bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0x1ea>
    1bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	69 ad       	ldd	r22, Y+57	; 0x39
    1bcc:	0e 94 32 0a 	call	0x1464	; 0x1464 <GPIO_writePort>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e8       	ldi	r26, 0x80	; 128
    1bd6:	bf e3       	ldi	r27, 0x3F	; 63
    1bd8:	89 8f       	std	Y+25, r24	; 0x19
    1bda:	9a 8f       	std	Y+26, r25	; 0x1a
    1bdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8d 8b       	std	Y+21, r24	; 0x15
    1bfa:	9e 8b       	std	Y+22, r25	; 0x16
    1bfc:	af 8b       	std	Y+23, r26	; 0x17
    1bfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c22:	6d 89       	ldd	r22, Y+21	; 0x15
    1c24:	7e 89       	ldd	r23, Y+22	; 0x16
    1c26:	8f 89       	ldd	r24, Y+23	; 0x17
    1c28:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <LCD_sendCommand+0x2ac>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9a 8b       	std	Y+18, r25	; 0x12
    1c6a:	89 8b       	std	Y+17, r24	; 0x11
    1c6c:	89 89       	ldd	r24, Y+17	; 0x11
    1c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_sendCommand+0x29a>
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9c 8b       	std	Y+20, r25	; 0x14
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8b 89       	ldd	r24, Y+19	; 0x13
    1c84:	9c 89       	ldd	r25, Y+20	; 0x14
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <LCD_sendCommand+0x28e>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	98 8b       	std	Y+16, r25	; 0x10
    1ca6:	8f 87       	std	Y+15, r24	; 0x0f
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	98 89       	ldd	r25, Y+16	; 0x10
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_sendCommand+0x2d6>
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	8b 87       	std	Y+11, r24	; 0x0b
    1cc8:	9c 87       	std	Y+12, r25	; 0x0c
    1cca:	ad 87       	std	Y+13, r26	; 0x0d
    1ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
    1ce8:	98 87       	std	Y+8, r25	; 0x08
    1cea:	a9 87       	std	Y+9, r26	; 0x09
    1cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_sendCommand+0x39a>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_sendCommand+0x388>
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_sendCommand+0x37c>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_sendCommand+0x3c4>
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1da2:	e9 96       	adiw	r28, 0x39	; 57
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	e9 97       	sbiw	r28, 0x39	; 57
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	bf e3       	ldi	r27, 0x3F	; 63
    1ddc:	8d ab       	std	Y+53, r24	; 0x35
    1dde:	9e ab       	std	Y+54, r25	; 0x36
    1de0:	af ab       	std	Y+55, r26	; 0x37
    1de2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	89 ab       	std	Y+49, r24	; 0x31
    1dfe:	9a ab       	std	Y+50, r25	; 0x32
    1e00:	ab ab       	std	Y+51, r26	; 0x33
    1e02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e04:	69 a9       	ldd	r22, Y+49	; 0x31
    1e06:	7a a9       	ldd	r23, Y+50	; 0x32
    1e08:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	98 ab       	std	Y+48, r25	; 0x30
    1e22:	8f a7       	std	Y+47, r24	; 0x2f
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e26:	69 a9       	ldd	r22, Y+49	; 0x31
    1e28:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e40:	7e a9       	ldd	r23, Y+54	; 0x36
    1e42:	8f a9       	ldd	r24, Y+55	; 0x37
    1e44:	98 ad       	ldd	r25, Y+56	; 0x38
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <LCD_displayCharacter+0xd2>
    1e68:	88 ec       	ldi	r24, 0xC8	; 200
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e a7       	std	Y+46, r25	; 0x2e
    1e6e:	8d a7       	std	Y+45, r24	; 0x2d
    1e70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_displayCharacter+0xc0>
    1e78:	9e a7       	std	Y+46, r25	; 0x2e
    1e7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	98 ab       	std	Y+48, r25	; 0x30
    1e84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e88:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <LCD_displayCharacter+0xb4>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	69 a9       	ldd	r22, Y+49	; 0x31
    1e92:	7a a9       	ldd	r23, Y+50	; 0x32
    1e94:	8b a9       	ldd	r24, Y+51	; 0x33
    1e96:	9c a9       	ldd	r25, Y+52	; 0x34
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	9c a7       	std	Y+44, r25	; 0x2c
    1eaa:	8b a7       	std	Y+43, r24	; 0x2b
    1eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_displayCharacter+0xfc>
    1eb4:	9c a7       	std	Y+44, r25	; 0x2c
    1eb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a0 e8       	ldi	r26, 0x80	; 128
    1ec8:	bf e3       	ldi	r27, 0x3F	; 63
    1eca:	8f a3       	std	Y+39, r24	; 0x27
    1ecc:	98 a7       	std	Y+40, r25	; 0x28
    1ece:	a9 a7       	std	Y+41, r26	; 0x29
    1ed0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a ef       	ldi	r20, 0xFA	; 250
    1ee0:	54 e4       	ldi	r21, 0x44	; 68
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8b a3       	std	Y+35, r24	; 0x23
    1eec:	9c a3       	std	Y+36, r25	; 0x24
    1eee:	ad a3       	std	Y+37, r26	; 0x25
    1ef0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f14:	6b a1       	ldd	r22, Y+35	; 0x23
    1f16:	7c a1       	ldd	r23, Y+36	; 0x24
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f30:	89 a5       	ldd	r24, Y+41	; 0x29
    1f32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <LCD_displayCharacter+0x1c0>
    1f56:	88 ec       	ldi	r24, 0xC8	; 200
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	98 a3       	std	Y+32, r25	; 0x20
    1f5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f60:	98 a1       	ldd	r25, Y+32	; 0x20
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_displayCharacter+0x1ae>
    1f66:	98 a3       	std	Y+32, r25	; 0x20
    1f68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9a a3       	std	Y+34, r25	; 0x22
    1f72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	89 a1       	ldd	r24, Y+33	; 0x21
    1f76:	9a a1       	ldd	r25, Y+34	; 0x22
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <LCD_displayCharacter+0x1a2>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	9e 8f       	std	Y+30, r25	; 0x1e
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_displayCharacter+0x1ea>
    1fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	69 ad       	ldd	r22, Y+57	; 0x39
    1faa:	0e 94 32 0a 	call	0x1464	; 0x1464 <GPIO_writePort>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	89 8f       	std	Y+25, r24	; 0x19
    1fb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fba:	ab 8f       	std	Y+27, r26	; 0x1b
    1fbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8d 8b       	std	Y+21, r24	; 0x15
    1fd8:	9e 8b       	std	Y+22, r25	; 0x16
    1fda:	af 8b       	std	Y+23, r26	; 0x17
    1fdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fde:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	69 8d       	ldd	r22, Y+25	; 0x19
    201a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_displayCharacter+0x2ac>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9a 8b       	std	Y+18, r25	; 0x12
    2048:	89 8b       	std	Y+17, r24	; 0x11
    204a:	89 89       	ldd	r24, Y+17	; 0x11
    204c:	9a 89       	ldd	r25, Y+18	; 0x12
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_displayCharacter+0x29a>
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9c 8b       	std	Y+20, r25	; 0x14
    205e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8b 89       	ldd	r24, Y+19	; 0x13
    2062:	9c 89       	ldd	r25, Y+20	; 0x14
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_displayCharacter+0x28e>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	98 8b       	std	Y+16, r25	; 0x10
    2084:	8f 87       	std	Y+15, r24	; 0x0f
    2086:	8f 85       	ldd	r24, Y+15	; 0x0f
    2088:	98 89       	ldd	r25, Y+16	; 0x10
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_displayCharacter+0x2d6>
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_writePin>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	8b 87       	std	Y+11, r24	; 0x0b
    20a6:	9c 87       	std	Y+12, r25	; 0x0c
    20a8:	ad 87       	std	Y+13, r26	; 0x0d
    20aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a ef       	ldi	r20, 0xFA	; 250
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8f 83       	std	Y+7, r24	; 0x07
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	a9 87       	std	Y+9, r26	; 0x09
    20ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_displayCharacter+0x33a>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_displayCharacter+0x39a>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_displayCharacter+0x388>
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_displayCharacter+0x37c>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_displayCharacter+0x3c4>
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2180:	e9 96       	adiw	r28, 0x39	; 57
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <LCD_displayString+0x6>
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9b 83       	std	Y+3, r25	; 0x03
    21a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	fc 01       	movw	r30, r24
    21b2:	e2 0f       	add	r30, r18
    21b4:	f3 1f       	adc	r31, r19
    21b6:	80 81       	ld	r24, Z
    21b8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_displayCharacter>
		i++;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	fc 01       	movw	r30, r24
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	80 81       	ld	r24, Z
    21d4:	88 23       	and	r24, r24
    21d6:	39 f7       	brne	.-50     	; 0x21a6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_moveCursor+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <LCD_moveCursor+0x8>
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	8a 83       	std	Y+2, r24	; 0x02
    21f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3d 83       	std	Y+5, r19	; 0x05
    21fe:	2c 83       	std	Y+4, r18	; 0x04
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	9d 81       	ldd	r25, Y+5	; 0x05
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 05       	cpc	r25, r1
    2208:	c1 f0       	breq	.+48     	; 0x223a <LCD_moveCursor+0x56>
    220a:	2c 81       	ldd	r18, Y+4	; 0x04
    220c:	3d 81       	ldd	r19, Y+5	; 0x05
    220e:	22 30       	cpi	r18, 0x02	; 2
    2210:	31 05       	cpc	r19, r1
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_moveCursor+0x3a>
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	61 f0       	breq	.+24     	; 0x2234 <LCD_moveCursor+0x50>
    221c:	19 c0       	rjmp	.+50     	; 0x2250 <LCD_moveCursor+0x6c>
    221e:	2c 81       	ldd	r18, Y+4	; 0x04
    2220:	3d 81       	ldd	r19, Y+5	; 0x05
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	69 f0       	breq	.+26     	; 0x2242 <LCD_moveCursor+0x5e>
    2228:	8c 81       	ldd	r24, Y+4	; 0x04
    222a:	9d 81       	ldd	r25, Y+5	; 0x05
    222c:	83 30       	cpi	r24, 0x03	; 3
    222e:	91 05       	cpc	r25, r1
    2230:	61 f0       	breq	.+24     	; 0x224a <LCD_moveCursor+0x66>
    2232:	0e c0       	rjmp	.+28     	; 0x2250 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	80 5c       	subi	r24, 0xC0	; 192
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	80 5f       	subi	r24, 0xF0	; 240
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	80 5b       	subi	r24, 0xB0	; 176
    224e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	80 68       	ori	r24, 0x80	; 128
    2254:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_sendCommand>
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <LCD_displayStringRowColumn+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <LCD_displayStringRowColumn+0x8>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	6a 83       	std	Y+2, r22	; 0x02
    2278:	5c 83       	std	Y+4, r21	; 0x04
    227a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	6a 81       	ldd	r22, Y+2	; 0x02
    2280:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	0e 94 c9 10 	call	0x2192	; 0x2192 <LCD_displayString>
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	62 97       	sbiw	r28, 0x12	; 18
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22b2:	89 89       	ldd	r24, Y+17	; 0x11
    22b4:	9a 89       	ldd	r25, Y+18	; 0x12
    22b6:	9e 01       	movw	r18, r28
    22b8:	2f 5f       	subi	r18, 0xFF	; 255
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	b9 01       	movw	r22, r18
    22be:	4a e0       	ldi	r20, 0x0A	; 10
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <itoa>
   LCD_displayString(buff); /* Display the string */
    22c6:	ce 01       	movw	r24, r28
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	0e 94 c9 10 	call	0x2192	; 0x2192 <LCD_displayString>
}
    22ce:	62 96       	adiw	r28, 0x12	; 18
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_sendCommand>
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <isNumber>:
		CTC_mode };

/* Description:
 * 	   take uint8 value and return true if it is a number
 */
uint8 isNumber(uint8 value) {
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <isNumber+0x6>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	89 83       	std	Y+1, r24	; 0x01
	return (value >= 0 && value <= 9);
    2300:	1a 82       	std	Y+2, r1	; 0x02
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	8a 30       	cpi	r24, 0x0A	; 10
    2306:	10 f4       	brcc	.+4      	; 0x230c <isNumber+0x18>
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8a 83       	std	Y+2, r24	; 0x02
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <TakePassword>:

/* Description:
 * 	   take password and re-entered password from the user through keypad
 * 	   receive byte from CONTROL_ECU to know if passwords match or not
 */
void TakePassword(void) {
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	c8 54       	subi	r28, 0x48	; 72
    2326:	d0 40       	sbci	r29, 0x00	; 0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    2332:	fe 01       	movw	r30, r28
    2334:	e8 5b       	subi	r30, 0xB8	; 184
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	10 82       	st	Z, r1
	uint8 key;
	LCD_clearScreen();
    233a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "enter password:");
    233e:	20 e6       	ldi	r18, 0x60	; 96
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	a9 01       	movw	r20, r18
    2348:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "5 digits only");
    234c:	20 e7       	ldi	r18, 0x70	; 112
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	a9 01       	movw	r20, r18
    2356:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    235a:	fe 01       	movw	r30, r28
    235c:	ed 5b       	subi	r30, 0xBD	; 189
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	aa e7       	ldi	r26, 0x7A	; 122
    2366:	b4 e4       	ldi	r27, 0x44	; 68
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	8e 01       	movw	r16, r28
    2372:	01 5c       	subi	r16, 0xC1	; 193
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	ed 5b       	subi	r30, 0xBD	; 189
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	f8 01       	movw	r30, r16
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239e:	fe 01       	movw	r30, r28
    23a0:	ff 96       	adiw	r30, 0x3f	; 63
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <TakePassword+0xac>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e af       	std	Y+62, r25	; 0x3e
    23c0:	8d af       	std	Y+61, r24	; 0x3d
    23c2:	46 c0       	rjmp	.+140    	; 0x2450 <TakePassword+0x138>
	else if (__tmp > 65535)
    23c4:	fe 01       	movw	r30, r28
    23c6:	ff 96       	adiw	r30, 0x3f	; 63
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	64 f5       	brge	.+88     	; 0x2438 <TakePassword+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 5b       	subi	r30, 0xBD	; 189
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e af       	std	Y+62, r25	; 0x3e
    240c:	8d af       	std	Y+61, r24	; 0x3d
    240e:	0f c0       	rjmp	.+30     	; 0x242e <TakePassword+0x116>
    2410:	88 ec       	ldi	r24, 0xC8	; 200
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c af       	std	Y+60, r25	; 0x3c
    2416:	8b af       	std	Y+59, r24	; 0x3b
    2418:	8b ad       	ldd	r24, Y+59	; 0x3b
    241a:	9c ad       	ldd	r25, Y+60	; 0x3c
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <TakePassword+0x104>
    2420:	9c af       	std	Y+60, r25	; 0x3c
    2422:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	8d ad       	ldd	r24, Y+61	; 0x3d
    2426:	9e ad       	ldd	r25, Y+62	; 0x3e
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	9e af       	std	Y+62, r25	; 0x3e
    242c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2430:	9e ad       	ldd	r25, Y+62	; 0x3e
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f7       	brne	.-38     	; 0x2410 <TakePassword+0xf8>
    2436:	16 c0       	rjmp	.+44     	; 0x2464 <TakePassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	fe 01       	movw	r30, r28
    243a:	ff 96       	adiw	r30, 0x3f	; 63
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9e af       	std	Y+62, r25	; 0x3e
    244e:	8d af       	std	Y+61, r24	; 0x3d
    2450:	8d ad       	ldd	r24, Y+61	; 0x3d
    2452:	9e ad       	ldd	r25, Y+62	; 0x3e
    2454:	9a af       	std	Y+58, r25	; 0x3a
    2456:	89 af       	std	Y+57, r24	; 0x39
    2458:	89 ad       	ldd	r24, Y+57	; 0x39
    245a:	9a ad       	ldd	r25, Y+58	; 0x3a
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <TakePassword+0x144>
    2460:	9a af       	std	Y+58, r25	; 0x3a
    2462:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_clearScreen();
    2464:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "enter password:");
    2468:	20 e6       	ldi	r18, 0x60	; 96
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	a9 01       	movw	r20, r18
    2472:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_moveCursor>
    247e:	92 c0       	rjmp	.+292    	; 0x25a4 <TakePassword+0x28c>

	while (i < 5) {

		key = KEYPAD_getPressedKey();
    2480:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    2484:	fe 01       	movw	r30, r28
    2486:	e9 5b       	subi	r30, 0xB9	; 185
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 83       	st	Z, r24
		if (isNumber(key)) {
    248c:	fe 01       	movw	r30, r28
    248e:	e9 5b       	subi	r30, 0xB9	; 185
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <isNumber>
    2498:	88 23       	and	r24, r24
    249a:	91 f0       	breq	.+36     	; 0x24c0 <TakePassword+0x1a8>
			LCD_displayCharacter('*');
    249c:	8a e2       	ldi	r24, 0x2A	; 42
    249e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_displayCharacter>
			UART_sendByte(key);
    24a2:	fe 01       	movw	r30, r28
    24a4:	e9 5b       	subi	r30, 0xB9	; 185
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			i++;
    24ae:	de 01       	movw	r26, r28
    24b0:	a8 5b       	subi	r26, 0xB8	; 184
    24b2:	bf 4f       	sbci	r27, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	e8 5b       	subi	r30, 0xB8	; 184
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	8c 93       	st	X, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	aa ef       	ldi	r26, 0xFA	; 250
    24c6:	b3 e4       	ldi	r27, 0x43	; 67
    24c8:	8d ab       	std	Y+53, r24	; 0x35
    24ca:	9e ab       	std	Y+54, r25	; 0x36
    24cc:	af ab       	std	Y+55, r26	; 0x37
    24ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6d a9       	ldd	r22, Y+53	; 0x35
    24d2:	7e a9       	ldd	r23, Y+54	; 0x36
    24d4:	8f a9       	ldd	r24, Y+55	; 0x37
    24d6:	98 ad       	ldd	r25, Y+56	; 0x38
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	89 ab       	std	Y+49, r24	; 0x31
    24ea:	9a ab       	std	Y+50, r25	; 0x32
    24ec:	ab ab       	std	Y+51, r26	; 0x33
    24ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <TakePassword+0x1fa>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	8f a7       	std	Y+47, r24	; 0x2f
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <TakePassword+0x278>
	else if (__tmp > 65535)
    2512:	69 a9       	ldd	r22, Y+49	; 0x31
    2514:	7a a9       	ldd	r23, Y+50	; 0x32
    2516:	8b a9       	ldd	r24, Y+51	; 0x33
    2518:	9c a9       	ldd	r25, Y+52	; 0x34
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <TakePassword+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6d a9       	ldd	r22, Y+53	; 0x35
    252c:	7e a9       	ldd	r23, Y+54	; 0x36
    252e:	8f a9       	ldd	r24, Y+55	; 0x37
    2530:	98 ad       	ldd	r25, Y+56	; 0x38
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <TakePassword+0x25a>
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e a7       	std	Y+46, r25	; 0x2e
    255a:	8d a7       	std	Y+45, r24	; 0x2d
    255c:	8d a5       	ldd	r24, Y+45	; 0x2d
    255e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <TakePassword+0x248>
    2564:	9e a7       	std	Y+46, r25	; 0x2e
    2566:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	98 ab       	std	Y+48, r25	; 0x30
    2570:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8f a5       	ldd	r24, Y+47	; 0x2f
    2574:	98 a9       	ldd	r25, Y+48	; 0x30
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <TakePassword+0x23c>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <TakePassword+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	8f a5       	ldd	r24, Y+47	; 0x2f
    2592:	98 a9       	ldd	r25, Y+48	; 0x30
    2594:	9c a7       	std	Y+44, r25	; 0x2c
    2596:	8b a7       	std	Y+43, r24	; 0x2b
    2598:	8b a5       	ldd	r24, Y+43	; 0x2b
    259a:	9c a5       	ldd	r25, Y+44	; 0x2c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <TakePassword+0x284>
    25a0:	9c a7       	std	Y+44, r25	; 0x2c
    25a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "enter password:");
	LCD_moveCursor(1, 0);

	while (i < 5) {
    25a4:	fe 01       	movw	r30, r28
    25a6:	e8 5b       	subi	r30, 0xB8	; 184
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	85 30       	cpi	r24, 0x05	; 5
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <TakePassword+0x29a>
    25b0:	67 cf       	rjmp	.-306    	; 0x2480 <TakePassword+0x168>
			i++;
		}
		_delay_ms(500);
	}

	key = KEYPAD_getPressedKey();
    25b2:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    25b6:	fe 01       	movw	r30, r28
    25b8:	e9 5b       	subi	r30, 0xB9	; 185
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 83       	st	Z, r24
    25be:	07 c0       	rjmp	.+14     	; 0x25ce <TakePassword+0x2b6>
	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != '=') {
		LCD_displayStringRowColumn(0, 0, "Press enter(=)");
    25c0:	2e e7       	ldi	r18, 0x7E	; 126
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	a9 01       	movw	r20, r18
    25ca:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
		_delay_ms(500);
	}

	key = KEYPAD_getPressedKey();
	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != '=') {
    25ce:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    25d2:	8d 33       	cpi	r24, 0x3D	; 61
    25d4:	a9 f7       	brne	.-22     	; 0x25c0 <TakePassword+0x2a8>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	aa ef       	ldi	r26, 0xFA	; 250
    25dc:	b3 e4       	ldi	r27, 0x43	; 67
    25de:	8f a3       	std	Y+39, r24	; 0x27
    25e0:	98 a7       	std	Y+40, r25	; 0x28
    25e2:	a9 a7       	std	Y+41, r26	; 0x29
    25e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6f a1       	ldd	r22, Y+39	; 0x27
    25e8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ea:	89 a5       	ldd	r24, Y+41	; 0x29
    25ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8b a3       	std	Y+35, r24	; 0x23
    2600:	9c a3       	std	Y+36, r25	; 0x24
    2602:	ad a3       	std	Y+37, r26	; 0x25
    2604:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <TakePassword+0x310>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9a a3       	std	Y+34, r25	; 0x22
    2624:	89 a3       	std	Y+33, r24	; 0x21
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <TakePassword+0x38e>
	else if (__tmp > 65535)
    2628:	6b a1       	ldd	r22, Y+35	; 0x23
    262a:	7c a1       	ldd	r23, Y+36	; 0x24
    262c:	8d a1       	ldd	r24, Y+37	; 0x25
    262e:	9e a1       	ldd	r25, Y+38	; 0x26
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <TakePassword+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6f a1       	ldd	r22, Y+39	; 0x27
    2642:	78 a5       	ldd	r23, Y+40	; 0x28
    2644:	89 a5       	ldd	r24, Y+41	; 0x29
    2646:	9a a5       	ldd	r25, Y+42	; 0x2a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <TakePassword+0x370>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	98 a3       	std	Y+32, r25	; 0x20
    2670:	8f 8f       	std	Y+31, r24	; 0x1f
    2672:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2674:	98 a1       	ldd	r25, Y+32	; 0x20
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <TakePassword+0x35e>
    267a:	98 a3       	std	Y+32, r25	; 0x20
    267c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	89 a1       	ldd	r24, Y+33	; 0x21
    2680:	9a a1       	ldd	r25, Y+34	; 0x22
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9a a3       	std	Y+34, r25	; 0x22
    2686:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	89 a1       	ldd	r24, Y+33	; 0x21
    268a:	9a a1       	ldd	r25, Y+34	; 0x22
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <TakePassword+0x352>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <TakePassword+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6b a1       	ldd	r22, Y+35	; 0x23
    2694:	7c a1       	ldd	r23, Y+36	; 0x24
    2696:	8d a1       	ldd	r24, Y+37	; 0x25
    2698:	9e a1       	ldd	r25, Y+38	; 0x26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9a a3       	std	Y+34, r25	; 0x22
    26a4:	89 a3       	std	Y+33, r24	; 0x21
    26a6:	89 a1       	ldd	r24, Y+33	; 0x21
    26a8:	9a a1       	ldd	r25, Y+34	; 0x22
    26aa:	9e 8f       	std	Y+30, r25	; 0x1e
    26ac:	8d 8f       	std	Y+29, r24	; 0x1d
    26ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <TakePassword+0x39a>
    26b6:	9e 8f       	std	Y+30, r25	; 0x1e
    26b8:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayStringRowColumn(0, 0, "Press enter(=)");
	}
	_delay_ms(500);
	/*re-take the password*/
	LCD_clearScreen();
    26ba:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, " re-enter");
    26be:	2d e8       	ldi	r18, 0x8D	; 141
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	a9 01       	movw	r20, r18
    26c8:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "pass:");
    26cc:	27 e9       	ldi	r18, 0x97	; 151
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	a9 01       	movw	r20, r18
    26d6:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 6);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	66 e0       	ldi	r22, 0x06	; 6
    26de:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_moveCursor>

	i = 0;
    26e2:	fe 01       	movw	r30, r28
    26e4:	e8 5b       	subi	r30, 0xB8	; 184
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	10 82       	st	Z, r1
    26ea:	92 c0       	rjmp	.+292    	; 0x2810 <TakePassword+0x4f8>
	while (i < 5) {
		key = KEYPAD_getPressedKey();
    26ec:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e9 5b       	subi	r30, 0xB9	; 185
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 83       	st	Z, r24
		if (isNumber(key)) {
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 5b       	subi	r30, 0xB9	; 185
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <isNumber>
    2704:	88 23       	and	r24, r24
    2706:	91 f0       	breq	.+36     	; 0x272c <TakePassword+0x414>
			LCD_displayCharacter('*');
    2708:	8a e2       	ldi	r24, 0x2A	; 42
    270a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_displayCharacter>
			UART_sendByte(key);
    270e:	fe 01       	movw	r30, r28
    2710:	e9 5b       	subi	r30, 0xB9	; 185
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			i++;
    271a:	de 01       	movw	r26, r28
    271c:	a8 5b       	subi	r26, 0xB8	; 184
    271e:	bf 4f       	sbci	r27, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	e8 5b       	subi	r30, 0xB8	; 184
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	8c 93       	st	X, r24
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	aa ef       	ldi	r26, 0xFA	; 250
    2732:	b3 e4       	ldi	r27, 0x43	; 67
    2734:	89 8f       	std	Y+25, r24	; 0x19
    2736:	9a 8f       	std	Y+26, r25	; 0x1a
    2738:	ab 8f       	std	Y+27, r26	; 0x1b
    273a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	69 8d       	ldd	r22, Y+25	; 0x19
    273e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8d 8b       	std	Y+21, r24	; 0x15
    2756:	9e 8b       	std	Y+22, r25	; 0x16
    2758:	af 8b       	std	Y+23, r26	; 0x17
    275a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <TakePassword+0x466>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <TakePassword+0x4e4>
	else if (__tmp > 65535)
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	4c f5       	brge	.+82     	; 0x27e8 <TakePassword+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	69 8d       	ldd	r22, Y+25	; 0x19
    2798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9c 8b       	std	Y+20, r25	; 0x14
    27bc:	8b 8b       	std	Y+19, r24	; 0x13
    27be:	0f c0       	rjmp	.+30     	; 0x27de <TakePassword+0x4c6>
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9a 8b       	std	Y+18, r25	; 0x12
    27c6:	89 8b       	std	Y+17, r24	; 0x11
    27c8:	89 89       	ldd	r24, Y+17	; 0x11
    27ca:	9a 89       	ldd	r25, Y+18	; 0x12
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <TakePassword+0x4b4>
    27d0:	9a 8b       	std	Y+18, r25	; 0x12
    27d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	8b 89       	ldd	r24, Y+19	; 0x13
    27d6:	9c 89       	ldd	r25, Y+20	; 0x14
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <TakePassword+0x4a8>
    27e6:	14 c0       	rjmp	.+40     	; 0x2810 <TakePassword+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ea:	7e 89       	ldd	r23, Y+22	; 0x16
    27ec:	8f 89       	ldd	r24, Y+23	; 0x17
    27ee:	98 8d       	ldd	r25, Y+24	; 0x18
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	98 8b       	std	Y+16, r25	; 0x10
    2802:	8f 87       	std	Y+15, r24	; 0x0f
    2804:	8f 85       	ldd	r24, Y+15	; 0x0f
    2806:	98 89       	ldd	r25, Y+16	; 0x10
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <TakePassword+0x4f0>
    280c:	98 8b       	std	Y+16, r25	; 0x10
    280e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayStringRowColumn(0, 0, " re-enter");
	LCD_displayStringRowColumn(1, 0, "pass:");
	LCD_moveCursor(1, 6);

	i = 0;
	while (i < 5) {
    2810:	fe 01       	movw	r30, r28
    2812:	e8 5b       	subi	r30, 0xB8	; 184
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	85 30       	cpi	r24, 0x05	; 5
    281a:	08 f4       	brcc	.+2      	; 0x281e <TakePassword+0x506>
    281c:	67 cf       	rjmp	.-306    	; 0x26ec <TakePassword+0x3d4>
    281e:	07 c0       	rjmp	.+14     	; 0x282e <TakePassword+0x516>
		}
		_delay_ms(500);
	}
	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != ENTER) {
		LCD_displayStringRowColumn(0, 0, "Press enter(=)");
    2820:	2e e7       	ldi	r18, 0x7E	; 126
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
			i++;
		}
		_delay_ms(500);
	}
	/*wait until the entered key is = to continue*/
	while (KEYPAD_getPressedKey() != ENTER) {
    282e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    2832:	8d 33       	cpi	r24, 0x3D	; 61
    2834:	a9 f7       	brne	.-22     	; 0x2820 <TakePassword+0x508>
		LCD_displayStringRowColumn(0, 0, "Press enter(=)");
	}

	/*receive the byte that indicate the passwords match or not*/
	g_receivedByte = UART_receiveByte();
    2836:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_receiveByte>
    283a:	80 93 8d 01 	sts	0x018D, r24
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a8 ec       	ldi	r26, 0xC8	; 200
    2844:	b2 e4       	ldi	r27, 0x42	; 66
    2846:	8b 87       	std	Y+11, r24	; 0x0b
    2848:	9c 87       	std	Y+12, r25	; 0x0c
    284a:	ad 87       	std	Y+13, r26	; 0x0d
    284c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a ef       	ldi	r20, 0xFA	; 250
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8f 83       	std	Y+7, r24	; 0x07
    2868:	98 87       	std	Y+8, r25	; 0x08
    286a:	a9 87       	std	Y+9, r26	; 0x09
    286c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <TakePassword+0x578>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	3f c0       	rjmp	.+126    	; 0x290e <TakePassword+0x5f6>
	else if (__tmp > 65535)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <TakePassword+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <TakePassword+0x5d8>
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <TakePassword+0x5c6>
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <TakePassword+0x5ba>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <TakePassword+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <TakePassword+0x602>
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    2922:	c8 5b       	subi	r28, 0xB8	; 184
    2924:	df 4f       	sbci	r29, 0xFF	; 255
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <verifyPassword>:
/* Description:
 * 	   take password and from the user through keypad
 * 	   send the password to CONTROL_ECU
 * 	   receive byte from CONTROL_ECU to know if passwords match or not
 */
void verifyPassword(void) {
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	6e 97       	sbiw	r28, 0x1e	; 30
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i = 0;
    294e:	1d 8e       	std	Y+29, r1	; 0x1d
    2950:	83 c0       	rjmp	.+262    	; 0x2a58 <verifyPassword+0x11e>
	while (i < 5) {
		key = KEYPAD_getPressedKey();
    2952:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    2956:	8e 8f       	std	Y+30, r24	; 0x1e
		if (isNumber(key)) {
    2958:	8e 8d       	ldd	r24, Y+30	; 0x1e
    295a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <isNumber>
    295e:	88 23       	and	r24, r24
    2960:	49 f0       	breq	.+18     	; 0x2974 <verifyPassword+0x3a>
			LCD_displayCharacter('*');
    2962:	8a e2       	ldi	r24, 0x2A	; 42
    2964:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_displayCharacter>
			UART_sendByte(key);
    2968:	8e 8d       	ldd	r24, Y+30	; 0x1e
    296a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			i++;
    296e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	8d 8f       	std	Y+29, r24	; 0x1d
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	aa ef       	ldi	r26, 0xFA	; 250
    297a:	b3 e4       	ldi	r27, 0x43	; 67
    297c:	89 8f       	std	Y+25, r24	; 0x19
    297e:	9a 8f       	std	Y+26, r25	; 0x1a
    2980:	ab 8f       	std	Y+27, r26	; 0x1b
    2982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	69 8d       	ldd	r22, Y+25	; 0x19
    2986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    298a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8d 8b       	std	Y+21, r24	; 0x15
    299e:	9e 8b       	std	Y+22, r25	; 0x16
    29a0:	af 8b       	std	Y+23, r26	; 0x17
    29a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29a4:	6d 89       	ldd	r22, Y+21	; 0x15
    29a6:	7e 89       	ldd	r23, Y+22	; 0x16
    29a8:	8f 89       	ldd	r24, Y+23	; 0x17
    29aa:	98 8d       	ldd	r25, Y+24	; 0x18
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <verifyPassword+0x8c>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9c 8b       	std	Y+20, r25	; 0x14
    29c2:	8b 8b       	std	Y+19, r24	; 0x13
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <verifyPassword+0x10a>
	else if (__tmp > 65535)
    29c6:	6d 89       	ldd	r22, Y+21	; 0x15
    29c8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ca:	8f 89       	ldd	r24, Y+23	; 0x17
    29cc:	98 8d       	ldd	r25, Y+24	; 0x18
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <verifyPassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	69 8d       	ldd	r22, Y+25	; 0x19
    29e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9c 8b       	std	Y+20, r25	; 0x14
    2a04:	8b 8b       	std	Y+19, r24	; 0x13
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <verifyPassword+0xec>
    2a08:	88 ec       	ldi	r24, 0xC8	; 200
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9a 8b       	std	Y+18, r25	; 0x12
    2a0e:	89 8b       	std	Y+17, r24	; 0x11
    2a10:	89 89       	ldd	r24, Y+17	; 0x11
    2a12:	9a 89       	ldd	r25, Y+18	; 0x12
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <verifyPassword+0xda>
    2a18:	9a 8b       	std	Y+18, r25	; 0x12
    2a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	8b 89       	ldd	r24, Y+19	; 0x13
    2a28:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <verifyPassword+0xce>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <verifyPassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
    2a44:	8b 89       	ldd	r24, Y+19	; 0x13
    2a46:	9c 89       	ldd	r25, Y+20	; 0x14
    2a48:	98 8b       	std	Y+16, r25	; 0x10
    2a4a:	8f 87       	std	Y+15, r24	; 0x0f
    2a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4e:	98 89       	ldd	r25, Y+16	; 0x10
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <verifyPassword+0x116>
    2a54:	98 8b       	std	Y+16, r25	; 0x10
    2a56:	8f 87       	std	Y+15, r24	; 0x0f
 * 	   receive byte from CONTROL_ECU to know if passwords match or not
 */
void verifyPassword(void) {
	uint8 key;
	uint8 i = 0;
	while (i < 5) {
    2a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5a:	85 30       	cpi	r24, 0x05	; 5
    2a5c:	08 f4       	brcc	.+2      	; 0x2a60 <verifyPassword+0x126>
    2a5e:	79 cf       	rjmp	.-270    	; 0x2952 <verifyPassword+0x18>
			i++;
		}
		_delay_ms(500);
	}
	/*wait until user presses enter*/
	while (KEYPAD_getPressedKey() != ENTER) {
    2a60:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    2a64:	8d 33       	cpi	r24, 0x3D	; 61
    2a66:	e1 f7       	brne	.-8      	; 0x2a60 <verifyPassword+0x126>
	}
	/*receive byte: PASSWORDS_MATCH or PASSWORDS_NOT_MATCH*/
	g_receivedByte = UART_receiveByte();
    2a68:	0e 94 01 07 	call	0xe02	; 0xe02 <UART_receiveByte>
    2a6c:	80 93 8d 01 	sts	0x018D, r24
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a8 ec       	ldi	r26, 0xC8	; 200
    2a76:	b2 e4       	ldi	r27, 0x42	; 66
    2a78:	8b 87       	std	Y+11, r24	; 0x0b
    2a7a:	9c 87       	std	Y+12, r25	; 0x0c
    2a7c:	ad 87       	std	Y+13, r26	; 0x0d
    2a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4a ef       	ldi	r20, 0xFA	; 250
    2a8e:	54 e4       	ldi	r21, 0x44	; 68
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8f 83       	std	Y+7, r24	; 0x07
    2a9a:	98 87       	std	Y+8, r25	; 0x08
    2a9c:	a9 87       	std	Y+9, r26	; 0x09
    2a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa2:	78 85       	ldd	r23, Y+8	; 0x08
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <verifyPassword+0x188>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	3f c0       	rjmp	.+126    	; 0x2b40 <verifyPassword+0x206>
	else if (__tmp > 65535)
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	4c f5       	brge	.+82     	; 0x2b2c <verifyPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    2adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <verifyPassword+0x1e8>
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 83       	std	Y+4, r25	; 0x04
    2b0a:	8b 83       	std	Y+3, r24	; 0x03
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <verifyPassword+0x1d6>
    2b14:	9c 83       	std	Y+4, r25	; 0x04
    2b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	69 f7       	brne	.-38     	; 0x2b04 <verifyPassword+0x1ca>
    2b2a:	14 c0       	rjmp	.+40     	; 0x2b54 <verifyPassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <verifyPassword+0x212>
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    2b54:	6e 96       	adiw	r28, 0x1e	; 30
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <operateBuzzer>:
/* Description:
 * 	   display ERROR message on the screen
 * 	   start the timer for 1 minute
 * 	   stop the timer
 */
void operateBuzzer(void) {
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2b6e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	/*display error message*/
	LCD_displayStringRowColumn(0, 0, "ERROR!");
    2b72:	2d e9       	ldi	r18, 0x9D	; 157
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	a9 01       	movw	r20, r18
    2b7c:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	/*start the timer and count 1 minute*/
	Timer1_init(&timer1_config_ptr);
    2b80:	88 e7       	ldi	r24, 0x78	; 120
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
	g_countSeconds = 0;
    2b88:	10 92 86 01 	sts	0x0186, r1
	/*display ERROR message for 1 minute*/
	while (g_countSeconds != 60) {
    2b8c:	80 91 86 01 	lds	r24, 0x0186
    2b90:	8c 33       	cpi	r24, 0x3C	; 60
    2b92:	e1 f7       	brne	.-8      	; 0x2b8c <operateBuzzer+0x26>
	}
	g_countSeconds = 0;
    2b94:	10 92 86 01 	sts	0x0186, r1
	/*stop the timer*/
	Timer1_deInit();
    2b98:	0e 94 65 06 	call	0xcca	; 0xcca <Timer1_deInit>
}
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <operateDoor>:
 * 	   display door is unlocking for 15 seconds
 * 	   display hold for 3 seconds
 * 	   display door is locking for 15 seconds
 *	   turn off timer1 and clear seconds counter
 */
void operateDoor(void) {
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	2e 97       	sbiw	r28, 0x0e	; 14
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2bb6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	/*display a message to the user that the door in unlocking*/
	LCD_displayStringRowColumn(0, 0, "Door is");
    2bba:	24 ea       	ldi	r18, 0xA4	; 164
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	a9 01       	movw	r20, r18
    2bc4:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking..");
    2bc8:	2c ea       	ldi	r18, 0xAC	; 172
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	a9 01       	movw	r20, r18
    2bd2:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	/*start timer1*/
	Timer1_init(&timer1_config_ptr);
    2bd6:	88 e7       	ldi	r24, 0x78	; 120
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
    2bda:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
	g_countSeconds = 0;
    2bde:	10 92 86 01 	sts	0x0186, r1
	/*wait for 15 seconds*/
	while (g_countSeconds != 15) {
    2be2:	80 91 86 01 	lds	r24, 0x0186
    2be6:	8f 30       	cpi	r24, 0x0F	; 15
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <operateDoor+0x40>
	}

	LCD_clearScreen();
    2bea:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	/*display a message to the user that the door is on hold*/
	LCD_displayStringRowColumn(0, 0, "Hold Door..");
    2bee:	28 eb       	ldi	r18, 0xB8	; 184
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	a9 01       	movw	r20, r18
    2bf8:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	g_countSeconds = 0;
    2bfc:	10 92 86 01 	sts	0x0186, r1
	/*hold door for 3 seconds*/
	while (g_countSeconds != 3) {
    2c00:	80 91 86 01 	lds	r24, 0x0186
    2c04:	83 30       	cpi	r24, 0x03	; 3
    2c06:	e1 f7       	brne	.-8      	; 0x2c00 <operateDoor+0x5e>
	}

	LCD_clearScreen();
    2c08:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
	/*display a message to the user that the door in locking*/
	LCD_displayStringRowColumn(0, 0, "Door is");
    2c0c:	24 ea       	ldi	r18, 0xA4	; 164
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	a9 01       	movw	r20, r18
    2c16:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Locking..");
    2c1a:	24 ec       	ldi	r18, 0xC4	; 196
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	a9 01       	movw	r20, r18
    2c24:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
	g_countSeconds = 0;
    2c28:	10 92 86 01 	sts	0x0186, r1
	/*wait for 15 seconds*/
	while (g_countSeconds != 15) {
    2c2c:	80 91 86 01 	lds	r24, 0x0186
    2c30:	8f 30       	cpi	r24, 0x0F	; 15
    2c32:	e1 f7       	brne	.-8      	; 0x2c2c <operateDoor+0x8a>
	}

	/*turn off the timer*/
	Timer1_deInit();
    2c34:	0e 94 65 06 	call	0xcca	; 0xcca <Timer1_deInit>
	g_countSeconds = 0;
    2c38:	10 92 86 01 	sts	0x0186, r1
	/*display a message to the user that the door in locked*/
	LCD_displayStringRowColumn(0, 0, "Door is locked");
    2c3c:	2e ec       	ldi	r18, 0xCE	; 206
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	a9 01       	movw	r20, r18
    2c46:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	aa ef       	ldi	r26, 0xFA	; 250
    2c50:	b3 e4       	ldi	r27, 0x43	; 67
    2c52:	8b 87       	std	Y+11, r24	; 0x0b
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	ad 87       	std	Y+13, r26	; 0x0d
    2c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <operateDoor+0xfa>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <operateDoor+0x178>
	else if (__tmp > 65535)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <operateDoor+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <operateDoor+0x15a>
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <operateDoor+0x148>
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <operateDoor+0x13c>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <operateDoor+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <operateDoor+0x184>
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2d2e:	2e 96       	adiw	r28, 0x0e	; 14
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <Timer1_INT>:

/* Description:
 * 	call back function
 *  called in timer1 ISR
 */
void Timer1_INT(void) {
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
	g_countSeconds++;
    2d48:	80 91 86 01 	lds	r24, 0x0186
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	80 93 86 01 	sts	0x0186, r24
}
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <main>:

int main(void) {
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	cb 58       	subi	r28, 0x8B	; 139
    2d66:	d0 40       	sbci	r29, 0x00	; 0
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
    2d72:	af e5       	ldi	r26, 0x5F	; 95
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	ef e5       	ldi	r30, 0x5F	; 95
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 68       	ori	r24, 0x80	; 128
    2d7e:	8c 93       	st	X, r24
	 *		char size 8 bits,
	 *		no parity checking
	 *		and one bit for stop bit
	 */
	UART_ConfigType uart_config_ptr = { baud_rate_9600, char_size_8,
			disabled_parity, one_bit_stop_bit };
    2d80:	ce 01       	movw	r24, r28
    2d82:	8e 57       	subi	r24, 0x7E	; 126
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	c9 57       	subi	r28, 0x79	; 121
    2d88:	df 4f       	sbci	r29, 0xFF	; 255
    2d8a:	99 83       	std	Y+1, r25	; 0x01
    2d8c:	88 83       	st	Y, r24
    2d8e:	c7 58       	subi	r28, 0x87	; 135
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	8e e7       	ldi	r24, 0x7E	; 126
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	c7 57       	subi	r28, 0x77	; 119
    2d98:	df 4f       	sbci	r29, 0xFF	; 255
    2d9a:	99 83       	std	Y+1, r25	; 0x01
    2d9c:	88 83       	st	Y, r24
    2d9e:	c9 58       	subi	r28, 0x89	; 137
    2da0:	d0 40       	sbci	r29, 0x00	; 0
    2da2:	95 e0       	ldi	r25, 0x05	; 5
    2da4:	c5 57       	subi	r28, 0x75	; 117
    2da6:	df 4f       	sbci	r29, 0xFF	; 255
    2da8:	98 83       	st	Y, r25
    2daa:	cb 58       	subi	r28, 0x8B	; 139
    2dac:	d0 40       	sbci	r29, 0x00	; 0
    2dae:	c7 57       	subi	r28, 0x77	; 119
    2db0:	df 4f       	sbci	r29, 0xFF	; 255
    2db2:	e8 81       	ld	r30, Y
    2db4:	f9 81       	ldd	r31, Y+1	; 0x01
    2db6:	c9 58       	subi	r28, 0x89	; 137
    2db8:	d0 40       	sbci	r29, 0x00	; 0
    2dba:	00 80       	ld	r0, Z
    2dbc:	c7 57       	subi	r28, 0x77	; 119
    2dbe:	df 4f       	sbci	r29, 0xFF	; 255
    2dc0:	88 81       	ld	r24, Y
    2dc2:	99 81       	ldd	r25, Y+1	; 0x01
    2dc4:	c9 58       	subi	r28, 0x89	; 137
    2dc6:	d0 40       	sbci	r29, 0x00	; 0
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	c7 57       	subi	r28, 0x77	; 119
    2dcc:	df 4f       	sbci	r29, 0xFF	; 255
    2dce:	99 83       	std	Y+1, r25	; 0x01
    2dd0:	88 83       	st	Y, r24
    2dd2:	c9 58       	subi	r28, 0x89	; 137
    2dd4:	d0 40       	sbci	r29, 0x00	; 0
    2dd6:	c9 57       	subi	r28, 0x79	; 121
    2dd8:	df 4f       	sbci	r29, 0xFF	; 255
    2dda:	e8 81       	ld	r30, Y
    2ddc:	f9 81       	ldd	r31, Y+1	; 0x01
    2dde:	c7 58       	subi	r28, 0x87	; 135
    2de0:	d0 40       	sbci	r29, 0x00	; 0
    2de2:	00 82       	st	Z, r0
    2de4:	c9 57       	subi	r28, 0x79	; 121
    2de6:	df 4f       	sbci	r29, 0xFF	; 255
    2de8:	88 81       	ld	r24, Y
    2dea:	99 81       	ldd	r25, Y+1	; 0x01
    2dec:	c7 58       	subi	r28, 0x87	; 135
    2dee:	d0 40       	sbci	r29, 0x00	; 0
    2df0:	01 96       	adiw	r24, 0x01	; 1
    2df2:	c9 57       	subi	r28, 0x79	; 121
    2df4:	df 4f       	sbci	r29, 0xFF	; 255
    2df6:	99 83       	std	Y+1, r25	; 0x01
    2df8:	88 83       	st	Y, r24
    2dfa:	c7 58       	subi	r28, 0x87	; 135
    2dfc:	d0 40       	sbci	r29, 0x00	; 0
    2dfe:	c5 57       	subi	r28, 0x75	; 117
    2e00:	df 4f       	sbci	r29, 0xFF	; 255
    2e02:	98 81       	ld	r25, Y
    2e04:	cb 58       	subi	r28, 0x8B	; 139
    2e06:	d0 40       	sbci	r29, 0x00	; 0
    2e08:	91 50       	subi	r25, 0x01	; 1
    2e0a:	c5 57       	subi	r28, 0x75	; 117
    2e0c:	df 4f       	sbci	r29, 0xFF	; 255
    2e0e:	98 83       	st	Y, r25
    2e10:	cb 58       	subi	r28, 0x8B	; 139
    2e12:	d0 40       	sbci	r29, 0x00	; 0
    2e14:	c5 57       	subi	r28, 0x75	; 117
    2e16:	df 4f       	sbci	r29, 0xFF	; 255
    2e18:	e8 81       	ld	r30, Y
    2e1a:	cb 58       	subi	r28, 0x8B	; 139
    2e1c:	d0 40       	sbci	r29, 0x00	; 0
    2e1e:	ee 23       	and	r30, r30
    2e20:	31 f6       	brne	.-116    	; 0x2dae <main+0x56>
	UART_init(&uart_config_ptr);
    2e22:	ce 01       	movw	r24, r28
    2e24:	8e 57       	subi	r24, 0x7E	; 126
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <UART_init>

	/*set the call back function for timer1 to count seconds*/
	Timer1_setCallBack(Timer1_INT);
    2e2c:	80 ea       	ldi	r24, 0xA0	; 160
    2e2e:	96 e1       	ldi	r25, 0x16	; 22
    2e30:	0e 94 53 06 	call	0xca6	; 0xca6 <Timer1_setCallBack>

	/*call the initialize function for the LCD */
	LCD_init();
    2e34:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_init>
	 * take password 2 times as signing in
	 * if the two passwords match continue to the main options
	 */
	while (1) {
		/*ask the user to create new password*/
		LCD_clearScreen();
    2e38:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 5, "Create");
    2e3c:	2d ed       	ldi	r18, 0xDD	; 221
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	65 e0       	ldi	r22, 0x05	; 5
    2e44:	a9 01       	movw	r20, r18
    2e46:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 2, "New Password");
    2e4a:	24 ee       	ldi	r18, 0xE4	; 228
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	62 e0       	ldi	r22, 0x02	; 2
    2e52:	a9 01       	movw	r20, r18
    2e54:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e5 58       	subi	r30, 0x85	; 133
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e8       	ldi	r25, 0x80	; 128
    2e62:	ab eb       	ldi	r26, 0xBB	; 187
    2e64:	b4 e4       	ldi	r27, 0x44	; 68
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6e:	8e 01       	movw	r16, r28
    2e70:	09 58       	subi	r16, 0x89	; 137
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	fe 01       	movw	r30, r28
    2e76:	e5 58       	subi	r30, 0x85	; 133
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a ef       	ldi	r20, 0xFA	; 250
    2e88:	54 e4       	ldi	r21, 0x44	; 68
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	f8 01       	movw	r30, r16
    2e94:	80 83       	st	Z, r24
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	a2 83       	std	Z+2, r26	; 0x02
    2e9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e9 58       	subi	r30, 0x89	; 137
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	44 f4       	brge	.+16     	; 0x2eca <main+0x172>
		__ticks = 1;
    2eba:	fe 01       	movw	r30, r28
    2ebc:	eb 58       	subi	r30, 0x8B	; 139
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	80 83       	st	Z, r24
    2ec8:	64 c0       	rjmp	.+200    	; 0x2f92 <main+0x23a>
	else if (__tmp > 65535)
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e9 58       	subi	r30, 0x89	; 137
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	57 e4       	ldi	r21, 0x47	; 71
    2ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <main+0x192>
    2ee8:	43 c0       	rjmp	.+134    	; 0x2f70 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eea:	fe 01       	movw	r30, r28
    2eec:	e5 58       	subi	r30, 0x85	; 133
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e2       	ldi	r20, 0x20	; 32
    2efe:	51 e4       	ldi	r21, 0x41	; 65
    2f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	8e 01       	movw	r16, r28
    2f0a:	0b 58       	subi	r16, 0x8B	; 139
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	bc 01       	movw	r22, r24
    2f10:	cd 01       	movw	r24, r26
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
    2f20:	1f c0       	rjmp	.+62     	; 0x2f60 <main+0x208>
    2f22:	fe 01       	movw	r30, r28
    2f24:	ed 58       	subi	r30, 0x8D	; 141
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	88 ec       	ldi	r24, 0xC8	; 200
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	80 83       	st	Z, r24
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 58       	subi	r30, 0x8D	; 141
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <main+0x1e2>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 58       	subi	r30, 0x8D	; 141
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	de 01       	movw	r26, r28
    2f4a:	ab 58       	subi	r26, 0x8B	; 139
    2f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	eb 58       	subi	r30, 0x8B	; 139
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	11 96       	adiw	r26, 0x01	; 1
    2f5c:	9c 93       	st	X, r25
    2f5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f60:	fe 01       	movw	r30, r28
    2f62:	eb 58       	subi	r30, 0x8B	; 139
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	d1 f6       	brne	.-76     	; 0x2f22 <main+0x1ca>
    2f6e:	27 c0       	rjmp	.+78     	; 0x2fbe <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	8e 01       	movw	r16, r28
    2f72:	0b 58       	subi	r16, 0x8B	; 139
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	fe 01       	movw	r30, r28
    2f78:	e9 58       	subi	r30, 0x89	; 137
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	de 01       	movw	r26, r28
    2f94:	af 58       	subi	r26, 0x8F	; 143
    2f96:	bf 4f       	sbci	r27, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	eb 58       	subi	r30, 0x8B	; 139
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	8d 93       	st	X+, r24
    2fa4:	9c 93       	st	X, r25
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ef 58       	subi	r30, 0x8F	; 143
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <main+0x258>
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ef 58       	subi	r30, 0x8F	; 143
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	80 83       	st	Z, r24
		_delay_ms(1500);
		/*
		 * send to Control_ECU PASSWORD_1 command
		 * as the user will enter the password
		 */
		UART_sendByte(PASSWORD_1);
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
		/*take password 2 times from the user*/
		TakePassword();
    2fc4:	0e 94 8c 11 	call	0x2318	; 0x2318 <TakePassword>
		/*if passwords match break the while loop*/
		if (g_receivedByte == PASSWORDS_MATCH)
    2fc8:	80 91 8d 01 	lds	r24, 0x018D
    2fcc:	81 3f       	cpi	r24, 0xF1	; 241
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <main+0x27a>
    2fd0:	81 c1       	rjmp	.+770    	; 0x32d4 <main+0x57c>
			break;
		else {
			LCD_clearScreen();
    2fd2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
			/*display a message if the passwords do not match in sign in*/
			LCD_displayStringRowColumn(0, 0, "passwords don't");
    2fd6:	21 ef       	ldi	r18, 0xF1	; 241
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	a9 01       	movw	r20, r18
    2fe0:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Match");
    2fe4:	21 e0       	ldi	r18, 0x01	; 1
    2fe6:	31 e0       	ldi	r19, 0x01	; 1
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	a9 01       	movw	r20, r18
    2fee:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e3 59       	subi	r30, 0x93	; 147
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	aa e7       	ldi	r26, 0x7A	; 122
    2ffe:	b4 e4       	ldi	r27, 0x44	; 68
    3000:	80 83       	st	Z, r24
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	a2 83       	std	Z+2, r26	; 0x02
    3006:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3008:	8e 01       	movw	r16, r28
    300a:	07 59       	subi	r16, 0x97	; 151
    300c:	1f 4f       	sbci	r17, 0xFF	; 255
    300e:	fe 01       	movw	r30, r28
    3010:	e3 59       	subi	r30, 0x93	; 147
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	60 81       	ld	r22, Z
    3016:	71 81       	ldd	r23, Z+1	; 0x01
    3018:	82 81       	ldd	r24, Z+2	; 0x02
    301a:	93 81       	ldd	r25, Z+3	; 0x03
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a ef       	ldi	r20, 0xFA	; 250
    3022:	54 e4       	ldi	r21, 0x44	; 68
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	f8 01       	movw	r30, r16
    302e:	80 83       	st	Z, r24
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	a2 83       	std	Z+2, r26	; 0x02
    3034:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3036:	fe 01       	movw	r30, r28
    3038:	e7 59       	subi	r30, 0x97	; 151
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	60 81       	ld	r22, Z
    303e:	71 81       	ldd	r23, Z+1	; 0x01
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e8       	ldi	r20, 0x80	; 128
    304a:	5f e3       	ldi	r21, 0x3F	; 63
    304c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3050:	88 23       	and	r24, r24
    3052:	44 f4       	brge	.+16     	; 0x3064 <main+0x30c>
		__ticks = 1;
    3054:	fe 01       	movw	r30, r28
    3056:	e9 59       	subi	r30, 0x99	; 153
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	80 83       	st	Z, r24
    3062:	64 c0       	rjmp	.+200    	; 0x312c <main+0x3d4>
	else if (__tmp > 65535)
    3064:	fe 01       	movw	r30, r28
    3066:	e7 59       	subi	r30, 0x97	; 151
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	0c f0       	brlt	.+2      	; 0x3084 <main+0x32c>
    3082:	43 c0       	rjmp	.+134    	; 0x310a <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	fe 01       	movw	r30, r28
    3086:	e3 59       	subi	r30, 0x93	; 147
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8e 01       	movw	r16, r28
    30a4:	09 59       	subi	r16, 0x99	; 153
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	f8 01       	movw	r30, r16
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
    30ba:	1f c0       	rjmp	.+62     	; 0x30fa <main+0x3a2>
    30bc:	fe 01       	movw	r30, r28
    30be:	eb 59       	subi	r30, 0x9B	; 155
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	88 ec       	ldi	r24, 0xC8	; 200
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 59       	subi	r30, 0x9B	; 155
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <main+0x37c>
    30d8:	fe 01       	movw	r30, r28
    30da:	eb 59       	subi	r30, 0x9B	; 155
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e2:	de 01       	movw	r26, r28
    30e4:	a9 59       	subi	r26, 0x99	; 153
    30e6:	bf 4f       	sbci	r27, 0xFF	; 255
    30e8:	fe 01       	movw	r30, r28
    30ea:	e9 59       	subi	r30, 0x99	; 153
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	9c 93       	st	X, r25
    30f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	fe 01       	movw	r30, r28
    30fc:	e9 59       	subi	r30, 0x99	; 153
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	d1 f6       	brne	.-76     	; 0x30bc <main+0x364>
    3108:	27 c0       	rjmp	.+78     	; 0x3158 <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	8e 01       	movw	r16, r28
    310c:	09 59       	subi	r16, 0x99	; 153
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	e7 59       	subi	r30, 0x97	; 151
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	de 01       	movw	r26, r28
    312e:	ad 59       	subi	r26, 0x9D	; 157
    3130:	bf 4f       	sbci	r27, 0xFF	; 255
    3132:	fe 01       	movw	r30, r28
    3134:	e9 59       	subi	r30, 0x99	; 153
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	8d 93       	st	X+, r24
    313e:	9c 93       	st	X, r25
    3140:	fe 01       	movw	r30, r28
    3142:	ed 59       	subi	r30, 0x9D	; 157
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <main+0x3f2>
    314e:	fe 01       	movw	r30, r28
    3150:	ed 59       	subi	r30, 0x9D	; 157
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_clearScreen();
    3158:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "try again");
    315c:	27 e0       	ldi	r18, 0x07	; 7
    315e:	31 e0       	ldi	r19, 0x01	; 1
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	60 e0       	ldi	r22, 0x00	; 0
    3164:	a9 01       	movw	r20, r18
    3166:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    316a:	fe 01       	movw	r30, r28
    316c:	e1 5a       	subi	r30, 0xA1	; 161
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	aa ef       	ldi	r26, 0xFA	; 250
    3176:	b3 e4       	ldi	r27, 0x43	; 67
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3180:	8e 01       	movw	r16, r28
    3182:	05 5a       	subi	r16, 0xA5	; 165
    3184:	1f 4f       	sbci	r17, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e1 5a       	subi	r30, 0xA1	; 161
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	80 83       	st	Z, r24
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	a2 83       	std	Z+2, r26	; 0x02
    31ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ae:	fe 01       	movw	r30, r28
    31b0:	e5 5a       	subi	r30, 0xA5	; 165
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	44 f4       	brge	.+16     	; 0x31dc <main+0x484>
		__ticks = 1;
    31cc:	fe 01       	movw	r30, r28
    31ce:	e7 5a       	subi	r30, 0xA7	; 167
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	64 c0       	rjmp	.+200    	; 0x32a4 <main+0x54c>
	else if (__tmp > 65535)
    31dc:	fe 01       	movw	r30, r28
    31de:	e5 5a       	subi	r30, 0xA5	; 165
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <main+0x4a4>
    31fa:	43 c0       	rjmp	.+134    	; 0x3282 <main+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	fe 01       	movw	r30, r28
    31fe:	e1 5a       	subi	r30, 0xA1	; 161
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8e 01       	movw	r16, r28
    321c:	07 5a       	subi	r16, 0xA7	; 167
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	f8 01       	movw	r30, r16
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
    3232:	1f c0       	rjmp	.+62     	; 0x3272 <main+0x51a>
    3234:	fe 01       	movw	r30, r28
    3236:	e9 5a       	subi	r30, 0xA9	; 169
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	80 83       	st	Z, r24
    3242:	fe 01       	movw	r30, r28
    3244:	e9 5a       	subi	r30, 0xA9	; 169
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <main+0x4f4>
    3250:	fe 01       	movw	r30, r28
    3252:	e9 5a       	subi	r30, 0xA9	; 169
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	de 01       	movw	r26, r28
    325c:	a7 5a       	subi	r26, 0xA7	; 167
    325e:	bf 4f       	sbci	r27, 0xFF	; 255
    3260:	fe 01       	movw	r30, r28
    3262:	e7 5a       	subi	r30, 0xA7	; 167
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	11 96       	adiw	r26, 0x01	; 1
    326e:	9c 93       	st	X, r25
    3270:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3272:	fe 01       	movw	r30, r28
    3274:	e7 5a       	subi	r30, 0xA7	; 167
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	d1 f6       	brne	.-76     	; 0x3234 <main+0x4dc>
    3280:	db cd       	rjmp	.-1098   	; 0x2e38 <main+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	8e 01       	movw	r16, r28
    3284:	07 5a       	subi	r16, 0xA7	; 167
    3286:	1f 4f       	sbci	r17, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	e5 5a       	subi	r30, 0xA5	; 165
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	de 01       	movw	r26, r28
    32a6:	ab 5a       	subi	r26, 0xAB	; 171
    32a8:	bf 4f       	sbci	r27, 0xFF	; 255
    32aa:	fe 01       	movw	r30, r28
    32ac:	e7 5a       	subi	r30, 0xA7	; 167
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	9c 93       	st	X, r25
    32b8:	8e 93       	st	-X, r24
    32ba:	fe 01       	movw	r30, r28
    32bc:	eb 5a       	subi	r30, 0xAB	; 171
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	80 81       	ld	r24, Z
    32c2:	91 81       	ldd	r25, Z+1	; 0x01
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <main+0x56c>
    32c8:	fe 01       	movw	r30, r28
    32ca:	eb 5a       	subi	r30, 0xAB	; 171
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	80 83       	st	Z, r24
    32d2:	b2 cd       	rjmp	.-1180   	; 0x2e38 <main+0xe0>
			_delay_ms(500);
		}
	}

	while (1) {
		LCD_clearScreen();
    32d4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
		/*display the main options*/
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    32d8:	21 e1       	ldi	r18, 0x11	; 17
    32da:	31 e0       	ldi	r19, 0x01	; 1
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	a9 01       	movw	r20, r18
    32e2:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change pass");
    32e6:	2f e1       	ldi	r18, 0x1F	; 31
    32e8:	31 e0       	ldi	r19, 0x01	; 1
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	a9 01       	movw	r20, r18
    32f0:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    32f4:	fe 01       	movw	r30, r28
    32f6:	ef 5a       	subi	r30, 0xAF	; 175
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	a8 ec       	ldi	r26, 0xC8	; 200
    3300:	b2 e4       	ldi	r27, 0x42	; 66
    3302:	80 83       	st	Z, r24
    3304:	91 83       	std	Z+1, r25	; 0x01
    3306:	a2 83       	std	Z+2, r26	; 0x02
    3308:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330a:	8e 01       	movw	r16, r28
    330c:	03 5b       	subi	r16, 0xB3	; 179
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	fe 01       	movw	r30, r28
    3312:	ef 5a       	subi	r30, 0xAF	; 175
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a ef       	ldi	r20, 0xFA	; 250
    3324:	54 e4       	ldi	r21, 0x44	; 68
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	f8 01       	movw	r30, r16
    3330:	80 83       	st	Z, r24
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	a2 83       	std	Z+2, r26	; 0x02
    3336:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3338:	fe 01       	movw	r30, r28
    333a:	e3 5b       	subi	r30, 0xB3	; 179
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	44 f4       	brge	.+16     	; 0x3366 <main+0x60e>
		__ticks = 1;
    3356:	fe 01       	movw	r30, r28
    3358:	e5 5b       	subi	r30, 0xB5	; 181
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
    3364:	64 c0       	rjmp	.+200    	; 0x342e <main+0x6d6>
	else if (__tmp > 65535)
    3366:	fe 01       	movw	r30, r28
    3368:	e3 5b       	subi	r30, 0xB3	; 179
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	3f ef       	ldi	r19, 0xFF	; 255
    3378:	4f e7       	ldi	r20, 0x7F	; 127
    337a:	57 e4       	ldi	r21, 0x47	; 71
    337c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3380:	18 16       	cp	r1, r24
    3382:	0c f0       	brlt	.+2      	; 0x3386 <main+0x62e>
    3384:	43 c0       	rjmp	.+134    	; 0x340c <main+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3386:	fe 01       	movw	r30, r28
    3388:	ef 5a       	subi	r30, 0xAF	; 175
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	93 81       	ldd	r25, Z+3	; 0x03
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8e 01       	movw	r16, r28
    33a6:	05 5b       	subi	r16, 0xB5	; 181
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	f8 01       	movw	r30, r16
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
    33bc:	1f c0       	rjmp	.+62     	; 0x33fc <main+0x6a4>
    33be:	fe 01       	movw	r30, r28
    33c0:	e7 5b       	subi	r30, 0xB7	; 183
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
    33cc:	fe 01       	movw	r30, r28
    33ce:	e7 5b       	subi	r30, 0xB7	; 183
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <main+0x67e>
    33da:	fe 01       	movw	r30, r28
    33dc:	e7 5b       	subi	r30, 0xB7	; 183
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	de 01       	movw	r26, r28
    33e6:	a5 5b       	subi	r26, 0xB5	; 181
    33e8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ea:	fe 01       	movw	r30, r28
    33ec:	e5 5b       	subi	r30, 0xB5	; 181
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	11 96       	adiw	r26, 0x01	; 1
    33f8:	9c 93       	st	X, r25
    33fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	fe 01       	movw	r30, r28
    33fe:	e5 5b       	subi	r30, 0xB5	; 181
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	d1 f6       	brne	.-76     	; 0x33be <main+0x666>
    340a:	27 c0       	rjmp	.+78     	; 0x345a <main+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	8e 01       	movw	r16, r28
    340e:	05 5b       	subi	r16, 0xB5	; 181
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	fe 01       	movw	r30, r28
    3414:	e3 5b       	subi	r30, 0xB3	; 179
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	f8 01       	movw	r30, r16
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	de 01       	movw	r26, r28
    3430:	a9 5b       	subi	r26, 0xB9	; 185
    3432:	bf 4f       	sbci	r27, 0xFF	; 255
    3434:	fe 01       	movw	r30, r28
    3436:	e5 5b       	subi	r30, 0xB5	; 181
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	8d 93       	st	X+, r24
    3440:	9c 93       	st	X, r25
    3442:	fe 01       	movw	r30, r28
    3444:	e9 5b       	subi	r30, 0xB9	; 185
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	91 81       	ldd	r25, Z+1	; 0x01
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <main+0x6f4>
    3450:	fe 01       	movw	r30, r28
    3452:	e9 5b       	subi	r30, 0xB9	; 185
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
		_delay_ms(100);

		/*wait until the pressed key is open door or change password*/
		while (1) {
			key = KEYPAD_getPressedKey();
    345a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <KEYPAD_getPressedKey>
    345e:	fe 01       	movw	r30, r28
    3460:	ef 57       	subi	r30, 0x7F	; 127
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 83       	st	Z, r24
			if (key == '+' || key == '-')
    3466:	fe 01       	movw	r30, r28
    3468:	ef 57       	subi	r30, 0x7F	; 127
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 81       	ld	r24, Z
    346e:	8b 32       	cpi	r24, 0x2B	; 43
    3470:	31 f0       	breq	.+12     	; 0x347e <main+0x726>
    3472:	fe 01       	movw	r30, r28
    3474:	ef 57       	subi	r30, 0x7F	; 127
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	8d 32       	cpi	r24, 0x2D	; 45
    347c:	71 f7       	brne	.-36     	; 0x345a <main+0x702>
				break;
		}
		LCD_clearScreen();
    347e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
		/*
		 * user has 3 tries to enter the password
		 * if password is wrong 3 times
		 * the buzzer is turned on
		 */
		for (try = 0; try < 3; ++try) {
    3482:	fe 01       	movw	r30, r28
    3484:	e0 58       	subi	r30, 0x80	; 128
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	10 82       	st	Z, r1
    348a:	b1 c0       	rjmp	.+354    	; 0x35ee <main+0x896>
			/*send to Control_ECU PASSWORD_2 command */
			UART_sendByte(PASSWORD_2);
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			LCD_displayStringRowColumn(0, 0, "enter password:");
    3492:	20 e6       	ldi	r18, 0x60	; 96
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	60 e0       	ldi	r22, 0x00	; 0
    349a:	a9 01       	movw	r20, r18
    349c:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 6);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	66 e0       	ldi	r22, 0x06	; 6
    34a4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LCD_moveCursor>
			verifyPassword();
    34a8:	0e 94 9d 14 	call	0x293a	; 0x293a <verifyPassword>
			/*if the password is right break the loop*/
			if (g_receivedByte == PASSWORDS_MATCH) {
    34ac:	80 91 8d 01 	lds	r24, 0x018D
    34b0:	81 3f       	cpi	r24, 0xF1	; 241
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <main+0x75e>
    34b4:	a3 c0       	rjmp	.+326    	; 0x35fc <main+0x8a4>
				break;
			}
			LCD_displayStringRowColumn(0, 0, "WRONG PASS     ");
    34b6:	2f e2       	ldi	r18, 0x2F	; 47
    34b8:	31 e0       	ldi	r19, 0x01	; 1
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	60 e0       	ldi	r22, 0x00	; 0
    34be:	a9 01       	movw	r20, r18
    34c0:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "              ");
    34c4:	2f e3       	ldi	r18, 0x3F	; 63
    34c6:	31 e0       	ldi	r19, 0x01	; 1
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	a9 01       	movw	r20, r18
    34ce:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    34d2:	fe 01       	movw	r30, r28
    34d4:	ed 5b       	subi	r30, 0xBD	; 189
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	aa ef       	ldi	r26, 0xFA	; 250
    34de:	b3 e4       	ldi	r27, 0x43	; 67
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e8:	8e 01       	movw	r16, r28
    34ea:	01 5c       	subi	r16, 0xC1	; 193
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	fe 01       	movw	r30, r28
    34f0:	ed 5b       	subi	r30, 0xBD	; 189
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a ef       	ldi	r20, 0xFA	; 250
    3502:	54 e4       	ldi	r21, 0x44	; 68
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	f8 01       	movw	r30, r16
    350e:	80 83       	st	Z, r24
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	a2 83       	std	Z+2, r26	; 0x02
    3514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3516:	fe 01       	movw	r30, r28
    3518:	ff 96       	adiw	r30, 0x3f	; 63
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e8       	ldi	r20, 0x80	; 128
    3528:	5f e3       	ldi	r21, 0x3F	; 63
    352a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    352e:	88 23       	and	r24, r24
    3530:	2c f4       	brge	.+10     	; 0x353c <main+0x7e4>
		__ticks = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9e af       	std	Y+62, r25	; 0x3e
    3538:	8d af       	std	Y+61, r24	; 0x3d
    353a:	46 c0       	rjmp	.+140    	; 0x35c8 <main+0x870>
	else if (__tmp > 65535)
    353c:	fe 01       	movw	r30, r28
    353e:	ff 96       	adiw	r30, 0x3f	; 63
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	57 e4       	ldi	r21, 0x47	; 71
    3550:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3554:	18 16       	cp	r1, r24
    3556:	64 f5       	brge	.+88     	; 0x35b0 <main+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3558:	fe 01       	movw	r30, r28
    355a:	ed 5b       	subi	r30, 0xBD	; 189
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e af       	std	Y+62, r25	; 0x3e
    3584:	8d af       	std	Y+61, r24	; 0x3d
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <main+0x84e>
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c af       	std	Y+60, r25	; 0x3c
    358e:	8b af       	std	Y+59, r24	; 0x3b
    3590:	8b ad       	ldd	r24, Y+59	; 0x3b
    3592:	9c ad       	ldd	r25, Y+60	; 0x3c
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <main+0x83c>
    3598:	9c af       	std	Y+60, r25	; 0x3c
    359a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d ad       	ldd	r24, Y+61	; 0x3d
    359e:	9e ad       	ldd	r25, Y+62	; 0x3e
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e af       	std	Y+62, r25	; 0x3e
    35a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <main+0x830>
    35ae:	16 c0       	rjmp	.+44     	; 0x35dc <main+0x884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	fe 01       	movw	r30, r28
    35b2:	ff 96       	adiw	r30, 0x3f	; 63
    35b4:	60 81       	ld	r22, Z
    35b6:	71 81       	ldd	r23, Z+1	; 0x01
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	93 81       	ldd	r25, Z+3	; 0x03
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e af       	std	Y+62, r25	; 0x3e
    35c6:	8d af       	std	Y+61, r24	; 0x3d
    35c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    35cc:	9a af       	std	Y+58, r25	; 0x3a
    35ce:	89 af       	std	Y+57, r24	; 0x39
    35d0:	89 ad       	ldd	r24, Y+57	; 0x39
    35d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <main+0x87c>
    35d8:	9a af       	std	Y+58, r25	; 0x3a
    35da:	89 af       	std	Y+57, r24	; 0x39
		/*
		 * user has 3 tries to enter the password
		 * if password is wrong 3 times
		 * the buzzer is turned on
		 */
		for (try = 0; try < 3; ++try) {
    35dc:	de 01       	movw	r26, r28
    35de:	a0 58       	subi	r26, 0x80	; 128
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	fe 01       	movw	r30, r28
    35e4:	e0 58       	subi	r30, 0x80	; 128
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	8f 5f       	subi	r24, 0xFF	; 255
    35ec:	8c 93       	st	X, r24
    35ee:	fe 01       	movw	r30, r28
    35f0:	e0 58       	subi	r30, 0x80	; 128
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	83 30       	cpi	r24, 0x03	; 3
    35f8:	08 f4       	brcc	.+2      	; 0x35fc <main+0x8a4>
    35fa:	48 cf       	rjmp	.-368    	; 0x348c <main+0x734>
		/*
		 * if the password was entered wrong for 3 times
		 * send to Control_ECU
		 * and turn the buzzer on
		 */
		if (g_receivedByte == PASSWORDS_NOT_MATCH) {
    35fc:	80 91 8d 01 	lds	r24, 0x018D
    3600:	8f 3f       	cpi	r24, 0xFF	; 255
    3602:	31 f4       	brne	.+12     	; 0x3610 <main+0x8b8>
			UART_sendByte(WRONG_PASS_3);
    3604:	80 e2       	ldi	r24, 0x20	; 32
    3606:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			operateBuzzer();
    360a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <operateBuzzer>
    360e:	62 ce       	rjmp	.-828    	; 0x32d4 <main+0x57c>
		/*
		 * if the pressed key is open door
		 * send to Control_ECU open door command
		 * and open the door
		 */
		else if (key == OPEN_DOOR) {
    3610:	fe 01       	movw	r30, r28
    3612:	ef 57       	subi	r30, 0x7F	; 127
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 81       	ld	r24, Z
    3618:	8b 32       	cpi	r24, 0x2B	; 43
    361a:	31 f4       	brne	.+12     	; 0x3628 <main+0x8d0>
			UART_sendByte('+');
    361c:	8b e2       	ldi	r24, 0x2B	; 43
    361e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
			operateDoor();
    3622:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <operateDoor>
    3626:	56 ce       	rjmp	.-852    	; 0x32d4 <main+0x57c>
		 * if the pressed key is change password
		 * the user has 3 chances to enter the password and verify it
		 * if the user doesn't pass any chance
		 * the buzzer is turned on for 1 minute
		 */
		else if (key == CHANGE_PASSWORD) {
    3628:	fe 01       	movw	r30, r28
    362a:	ef 57       	subi	r30, 0x7F	; 127
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 81       	ld	r24, Z
    3630:	8d 32       	cpi	r24, 0x2D	; 45
    3632:	09 f0       	breq	.+2      	; 0x3636 <main+0x8de>
    3634:	4f ce       	rjmp	.-866    	; 0x32d4 <main+0x57c>
			LCD_clearScreen();
    3636:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 5, "change");
    363a:	2e e4       	ldi	r18, 0x4E	; 78
    363c:	31 e0       	ldi	r19, 0x01	; 1
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	65 e0       	ldi	r22, 0x05	; 5
    3642:	a9 01       	movw	r20, r18
    3644:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 2, "your password");
    3648:	25 e5       	ldi	r18, 0x55	; 85
    364a:	31 e0       	ldi	r19, 0x01	; 1
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	62 e0       	ldi	r22, 0x02	; 2
    3650:	a9 01       	movw	r20, r18
    3652:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	aa e7       	ldi	r26, 0x7A	; 122
    365c:	b4 e4       	ldi	r27, 0x44	; 68
    365e:	8d ab       	std	Y+53, r24	; 0x35
    3660:	9e ab       	std	Y+54, r25	; 0x36
    3662:	af ab       	std	Y+55, r26	; 0x37
    3664:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3666:	6d a9       	ldd	r22, Y+53	; 0x35
    3668:	7e a9       	ldd	r23, Y+54	; 0x36
    366a:	8f a9       	ldd	r24, Y+55	; 0x37
    366c:	98 ad       	ldd	r25, Y+56	; 0x38
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	4a ef       	ldi	r20, 0xFA	; 250
    3674:	54 e4       	ldi	r21, 0x44	; 68
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	89 ab       	std	Y+49, r24	; 0x31
    3680:	9a ab       	std	Y+50, r25	; 0x32
    3682:	ab ab       	std	Y+51, r26	; 0x33
    3684:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3686:	69 a9       	ldd	r22, Y+49	; 0x31
    3688:	7a a9       	ldd	r23, Y+50	; 0x32
    368a:	8b a9       	ldd	r24, Y+51	; 0x33
    368c:	9c a9       	ldd	r25, Y+52	; 0x34
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	2c f4       	brge	.+10     	; 0x36a8 <main+0x950>
		__ticks = 1;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	98 ab       	std	Y+48, r25	; 0x30
    36a4:	8f a7       	std	Y+47, r24	; 0x2f
    36a6:	3f c0       	rjmp	.+126    	; 0x3726 <main+0x9ce>
	else if (__tmp > 65535)
    36a8:	69 a9       	ldd	r22, Y+49	; 0x31
    36aa:	7a a9       	ldd	r23, Y+50	; 0x32
    36ac:	8b a9       	ldd	r24, Y+51	; 0x33
    36ae:	9c a9       	ldd	r25, Y+52	; 0x34
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	3f ef       	ldi	r19, 0xFF	; 255
    36b4:	4f e7       	ldi	r20, 0x7F	; 127
    36b6:	57 e4       	ldi	r21, 0x47	; 71
    36b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36bc:	18 16       	cp	r1, r24
    36be:	4c f5       	brge	.+82     	; 0x3712 <main+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c0:	6d a9       	ldd	r22, Y+53	; 0x35
    36c2:	7e a9       	ldd	r23, Y+54	; 0x36
    36c4:	8f a9       	ldd	r24, Y+55	; 0x37
    36c6:	98 ad       	ldd	r25, Y+56	; 0x38
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	98 ab       	std	Y+48, r25	; 0x30
    36e6:	8f a7       	std	Y+47, r24	; 0x2f
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <main+0x9b0>
    36ea:	88 ec       	ldi	r24, 0xC8	; 200
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9e a7       	std	Y+46, r25	; 0x2e
    36f0:	8d a7       	std	Y+45, r24	; 0x2d
    36f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    36f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <main+0x99e>
    36fa:	9e a7       	std	Y+46, r25	; 0x2e
    36fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3700:	98 a9       	ldd	r25, Y+48	; 0x30
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	98 ab       	std	Y+48, r25	; 0x30
    3706:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	8f a5       	ldd	r24, Y+47	; 0x2f
    370a:	98 a9       	ldd	r25, Y+48	; 0x30
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	69 f7       	brne	.-38     	; 0x36ea <main+0x992>
    3710:	14 c0       	rjmp	.+40     	; 0x373a <main+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	69 a9       	ldd	r22, Y+49	; 0x31
    3714:	7a a9       	ldd	r23, Y+50	; 0x32
    3716:	8b a9       	ldd	r24, Y+51	; 0x33
    3718:	9c a9       	ldd	r25, Y+52	; 0x34
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	98 ab       	std	Y+48, r25	; 0x30
    3724:	8f a7       	std	Y+47, r24	; 0x2f
    3726:	8f a5       	ldd	r24, Y+47	; 0x2f
    3728:	98 a9       	ldd	r25, Y+48	; 0x30
    372a:	9c a7       	std	Y+44, r25	; 0x2c
    372c:	8b a7       	std	Y+43, r24	; 0x2b
    372e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3730:	9c a5       	ldd	r25, Y+44	; 0x2c
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <main+0x9da>
    3736:	9c a7       	std	Y+44, r25	; 0x2c
    3738:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			uint8 try = 0;
    373a:	fe 01       	movw	r30, r28
    373c:	e1 58       	subi	r30, 0x81	; 129
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	10 82       	st	Z, r1
			for (try = 0; try < 3; ++try) {
    3742:	fe 01       	movw	r30, r28
    3744:	e1 58       	subi	r30, 0x81	; 129
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	10 82       	st	Z, r1
    374a:	16 c1       	rjmp	.+556    	; 0x3978 <main+0xc20>
				UART_sendByte(CHANGE_PASSWORD);
    374c:	8d e2       	ldi	r24, 0x2D	; 45
    374e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
				TakePassword();
    3752:	0e 94 8c 11 	call	0x2318	; 0x2318 <TakePassword>
				/*if passwords match break the while loop*/
				if (g_receivedByte == PASSWORDS_MATCH)
    3756:	80 91 8d 01 	lds	r24, 0x018D
    375a:	81 3f       	cpi	r24, 0xF1	; 241
    375c:	09 f4       	brne	.+2      	; 0x3760 <main+0xa08>
    375e:	13 c1       	rjmp	.+550    	; 0x3986 <main+0xc2e>
					break;
				else {
					/*if the password is wrong print a message to the user*/
					LCD_clearScreen();
    3760:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "passwords don't");
    3764:	21 ef       	ldi	r18, 0xF1	; 241
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	a9 01       	movw	r20, r18
    376e:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Match");
    3772:	21 e0       	ldi	r18, 0x01	; 1
    3774:	31 e0       	ldi	r19, 0x01	; 1
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	a9 01       	movw	r20, r18
    377c:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	aa e7       	ldi	r26, 0x7A	; 122
    3786:	b4 e4       	ldi	r27, 0x44	; 68
    3788:	8f a3       	std	Y+39, r24	; 0x27
    378a:	98 a7       	std	Y+40, r25	; 0x28
    378c:	a9 a7       	std	Y+41, r26	; 0x29
    378e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3790:	6f a1       	ldd	r22, Y+39	; 0x27
    3792:	78 a5       	ldd	r23, Y+40	; 0x28
    3794:	89 a5       	ldd	r24, Y+41	; 0x29
    3796:	9a a5       	ldd	r25, Y+42	; 0x2a
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	4a ef       	ldi	r20, 0xFA	; 250
    379e:	54 e4       	ldi	r21, 0x44	; 68
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	8b a3       	std	Y+35, r24	; 0x23
    37aa:	9c a3       	std	Y+36, r25	; 0x24
    37ac:	ad a3       	std	Y+37, r26	; 0x25
    37ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37b0:	6b a1       	ldd	r22, Y+35	; 0x23
    37b2:	7c a1       	ldd	r23, Y+36	; 0x24
    37b4:	8d a1       	ldd	r24, Y+37	; 0x25
    37b6:	9e a1       	ldd	r25, Y+38	; 0x26
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <main+0xa7a>
		__ticks = 1;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9a a3       	std	Y+34, r25	; 0x22
    37ce:	89 a3       	std	Y+33, r24	; 0x21
    37d0:	3f c0       	rjmp	.+126    	; 0x3850 <main+0xaf8>
	else if (__tmp > 65535)
    37d2:	6b a1       	ldd	r22, Y+35	; 0x23
    37d4:	7c a1       	ldd	r23, Y+36	; 0x24
    37d6:	8d a1       	ldd	r24, Y+37	; 0x25
    37d8:	9e a1       	ldd	r25, Y+38	; 0x26
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	3f ef       	ldi	r19, 0xFF	; 255
    37de:	4f e7       	ldi	r20, 0x7F	; 127
    37e0:	57 e4       	ldi	r21, 0x47	; 71
    37e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e6:	18 16       	cp	r1, r24
    37e8:	4c f5       	brge	.+82     	; 0x383c <main+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ea:	6f a1       	ldd	r22, Y+39	; 0x27
    37ec:	78 a5       	ldd	r23, Y+40	; 0x28
    37ee:	89 a5       	ldd	r24, Y+41	; 0x29
    37f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e2       	ldi	r20, 0x20	; 32
    37f8:	51 e4       	ldi	r21, 0x41	; 65
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9a a3       	std	Y+34, r25	; 0x22
    3810:	89 a3       	std	Y+33, r24	; 0x21
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <main+0xada>
    3814:	88 ec       	ldi	r24, 0xC8	; 200
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	98 a3       	std	Y+32, r25	; 0x20
    381a:	8f 8f       	std	Y+31, r24	; 0x1f
    381c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    381e:	98 a1       	ldd	r25, Y+32	; 0x20
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <main+0xac8>
    3824:	98 a3       	std	Y+32, r25	; 0x20
    3826:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3828:	89 a1       	ldd	r24, Y+33	; 0x21
    382a:	9a a1       	ldd	r25, Y+34	; 0x22
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	9a a3       	std	Y+34, r25	; 0x22
    3830:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3832:	89 a1       	ldd	r24, Y+33	; 0x21
    3834:	9a a1       	ldd	r25, Y+34	; 0x22
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	69 f7       	brne	.-38     	; 0x3814 <main+0xabc>
    383a:	14 c0       	rjmp	.+40     	; 0x3864 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383c:	6b a1       	ldd	r22, Y+35	; 0x23
    383e:	7c a1       	ldd	r23, Y+36	; 0x24
    3840:	8d a1       	ldd	r24, Y+37	; 0x25
    3842:	9e a1       	ldd	r25, Y+38	; 0x26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
    3850:	89 a1       	ldd	r24, Y+33	; 0x21
    3852:	9a a1       	ldd	r25, Y+34	; 0x22
    3854:	9e 8f       	std	Y+30, r25	; 0x1e
    3856:	8d 8f       	std	Y+29, r24	; 0x1d
    3858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    385a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <main+0xb04>
    3860:	9e 8f       	std	Y+30, r25	; 0x1e
    3862:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					LCD_clearScreen();
    3864:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
					/*if the user has not passed the 3 chances he cannot try again*/
					if (try < 2)
    3868:	fe 01       	movw	r30, r28
    386a:	e1 58       	subi	r30, 0x81	; 129
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	82 30       	cpi	r24, 0x02	; 2
    3872:	38 f4       	brcc	.+14     	; 0x3882 <main+0xb2a>
						LCD_displayStringRowColumn(0, 0, "try again");
    3874:	27 e0       	ldi	r18, 0x07	; 7
    3876:	31 e0       	ldi	r19, 0x01	; 1
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	a9 01       	movw	r20, r18
    387e:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	aa ef       	ldi	r26, 0xFA	; 250
    3888:	b3 e4       	ldi	r27, 0x43	; 67
    388a:	89 8f       	std	Y+25, r24	; 0x19
    388c:	9a 8f       	std	Y+26, r25	; 0x1a
    388e:	ab 8f       	std	Y+27, r26	; 0x1b
    3890:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3892:	69 8d       	ldd	r22, Y+25	; 0x19
    3894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	4a ef       	ldi	r20, 0xFA	; 250
    38a0:	54 e4       	ldi	r21, 0x44	; 68
    38a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	8d 8b       	std	Y+21, r24	; 0x15
    38ac:	9e 8b       	std	Y+22, r25	; 0x16
    38ae:	af 8b       	std	Y+23, r26	; 0x17
    38b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38b2:	6d 89       	ldd	r22, Y+21	; 0x15
    38b4:	7e 89       	ldd	r23, Y+22	; 0x16
    38b6:	8f 89       	ldd	r24, Y+23	; 0x17
    38b8:	98 8d       	ldd	r25, Y+24	; 0x18
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e8       	ldi	r20, 0x80	; 128
    38c0:	5f e3       	ldi	r21, 0x3F	; 63
    38c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c6:	88 23       	and	r24, r24
    38c8:	2c f4       	brge	.+10     	; 0x38d4 <main+0xb7c>
		__ticks = 1;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	9c 8b       	std	Y+20, r25	; 0x14
    38d0:	8b 8b       	std	Y+19, r24	; 0x13
    38d2:	3f c0       	rjmp	.+126    	; 0x3952 <main+0xbfa>
	else if (__tmp > 65535)
    38d4:	6d 89       	ldd	r22, Y+21	; 0x15
    38d6:	7e 89       	ldd	r23, Y+22	; 0x16
    38d8:	8f 89       	ldd	r24, Y+23	; 0x17
    38da:	98 8d       	ldd	r25, Y+24	; 0x18
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	3f ef       	ldi	r19, 0xFF	; 255
    38e0:	4f e7       	ldi	r20, 0x7F	; 127
    38e2:	57 e4       	ldi	r21, 0x47	; 71
    38e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38e8:	18 16       	cp	r1, r24
    38ea:	4c f5       	brge	.+82     	; 0x393e <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ec:	69 8d       	ldd	r22, Y+25	; 0x19
    38ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e2       	ldi	r20, 0x20	; 32
    38fa:	51 e4       	ldi	r21, 0x41	; 65
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	0f c0       	rjmp	.+30     	; 0x3934 <main+0xbdc>
    3916:	88 ec       	ldi	r24, 0xC8	; 200
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9a 8b       	std	Y+18, r25	; 0x12
    391c:	89 8b       	std	Y+17, r24	; 0x11
    391e:	89 89       	ldd	r24, Y+17	; 0x11
    3920:	9a 89       	ldd	r25, Y+18	; 0x12
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	f1 f7       	brne	.-4      	; 0x3922 <main+0xbca>
    3926:	9a 8b       	std	Y+18, r25	; 0x12
    3928:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392a:	8b 89       	ldd	r24, Y+19	; 0x13
    392c:	9c 89       	ldd	r25, Y+20	; 0x14
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	9c 8b       	std	Y+20, r25	; 0x14
    3932:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	8b 89       	ldd	r24, Y+19	; 0x13
    3936:	9c 89       	ldd	r25, Y+20	; 0x14
    3938:	00 97       	sbiw	r24, 0x00	; 0
    393a:	69 f7       	brne	.-38     	; 0x3916 <main+0xbbe>
    393c:	14 c0       	rjmp	.+40     	; 0x3966 <main+0xc0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393e:	6d 89       	ldd	r22, Y+21	; 0x15
    3940:	7e 89       	ldd	r23, Y+22	; 0x16
    3942:	8f 89       	ldd	r24, Y+23	; 0x17
    3944:	98 8d       	ldd	r25, Y+24	; 0x18
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	9c 8b       	std	Y+20, r25	; 0x14
    3950:	8b 8b       	std	Y+19, r24	; 0x13
    3952:	8b 89       	ldd	r24, Y+19	; 0x13
    3954:	9c 89       	ldd	r25, Y+20	; 0x14
    3956:	98 8b       	std	Y+16, r25	; 0x10
    3958:	8f 87       	std	Y+15, r24	; 0x0f
    395a:	8f 85       	ldd	r24, Y+15	; 0x0f
    395c:	98 89       	ldd	r25, Y+16	; 0x10
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <main+0xc06>
    3962:	98 8b       	std	Y+16, r25	; 0x10
    3964:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 5, "change");
			LCD_displayStringRowColumn(1, 2, "your password");
			_delay_ms(1000);
			uint8 try = 0;
			for (try = 0; try < 3; ++try) {
    3966:	de 01       	movw	r26, r28
    3968:	a1 58       	subi	r26, 0x81	; 129
    396a:	bf 4f       	sbci	r27, 0xFF	; 255
    396c:	fe 01       	movw	r30, r28
    396e:	e1 58       	subi	r30, 0x81	; 129
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	8f 5f       	subi	r24, 0xFF	; 255
    3976:	8c 93       	st	X, r24
    3978:	fe 01       	movw	r30, r28
    397a:	e1 58       	subi	r30, 0x81	; 129
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	83 30       	cpi	r24, 0x03	; 3
    3982:	08 f4       	brcc	.+2      	; 0x3986 <main+0xc2e>
    3984:	e3 ce       	rjmp	.-570    	; 0x374c <main+0x9f4>
			/*
			 * if the user enters the password wrong for 3 times after choosing from main options
			 * send to Control_ECU WRONG_PASS_3 command
			 * and turn on the buzzer
			 */
			if (g_receivedByte == PASSWORDS_NOT_MATCH) {
    3986:	80 91 8d 01 	lds	r24, 0x018D
    398a:	8f 3f       	cpi	r24, 0xFF	; 255
    398c:	31 f4       	brne	.+12     	; 0x399a <main+0xc42>
				UART_sendByte(WRONG_PASS_3);
    398e:	80 e2       	ldi	r24, 0x20	; 32
    3990:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <UART_sendByte>
				operateBuzzer();
    3994:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <operateBuzzer>
    3998:	9d cc       	rjmp	.-1734   	; 0x32d4 <main+0x57c>
			}
			/*
			 * in the change password option
			 * if the 2 passwords entered by the user match
			 */
			else if (g_receivedByte == PASSWORDS_MATCH) {
    399a:	80 91 8d 01 	lds	r24, 0x018D
    399e:	81 3f       	cpi	r24, 0xF1	; 241
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <main+0xc4c>
    39a2:	98 cc       	rjmp	.-1744   	; 0x32d4 <main+0x57c>
				LCD_clearScreen();
    39a4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_clearScreen>
				/*display a message to indicate that the password changed*/
				LCD_displayStringRowColumn(0, 0, "Pass changed");
    39a8:	23 e6       	ldi	r18, 0x63	; 99
    39aa:	31 e0       	ldi	r19, 0x01	; 1
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	a9 01       	movw	r20, r18
    39b2:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_displayStringRowColumn>
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	aa ef       	ldi	r26, 0xFA	; 250
    39bc:	b3 e4       	ldi	r27, 0x43	; 67
    39be:	8b 87       	std	Y+11, r24	; 0x0b
    39c0:	9c 87       	std	Y+12, r25	; 0x0c
    39c2:	ad 87       	std	Y+13, r26	; 0x0d
    39c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    39cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a ef       	ldi	r20, 0xFA	; 250
    39d4:	54 e4       	ldi	r21, 0x44	; 68
    39d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	8f 83       	std	Y+7, r24	; 0x07
    39e0:	98 87       	std	Y+8, r25	; 0x08
    39e2:	a9 87       	std	Y+9, r26	; 0x09
    39e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39e6:	6f 81       	ldd	r22, Y+7	; 0x07
    39e8:	78 85       	ldd	r23, Y+8	; 0x08
    39ea:	89 85       	ldd	r24, Y+9	; 0x09
    39ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39fa:	88 23       	and	r24, r24
    39fc:	2c f4       	brge	.+10     	; 0x3a08 <main+0xcb0>
		__ticks = 1;
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9e 83       	std	Y+6, r25	; 0x06
    3a04:	8d 83       	std	Y+5, r24	; 0x05
    3a06:	3f c0       	rjmp	.+126    	; 0x3a86 <main+0xd2e>
	else if (__tmp > 65535)
    3a08:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0a:	78 85       	ldd	r23, Y+8	; 0x08
    3a0c:	89 85       	ldd	r24, Y+9	; 0x09
    3a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	3f ef       	ldi	r19, 0xFF	; 255
    3a14:	4f e7       	ldi	r20, 0x7F	; 127
    3a16:	57 e4       	ldi	r21, 0x47	; 71
    3a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a1c:	18 16       	cp	r1, r24
    3a1e:	4c f5       	brge	.+82     	; 0x3a72 <main+0xd1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e2       	ldi	r20, 0x20	; 32
    3a2e:	51 e4       	ldi	r21, 0x41	; 65
    3a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	bc 01       	movw	r22, r24
    3a3a:	cd 01       	movw	r24, r26
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	8d 83       	std	Y+5, r24	; 0x05
    3a48:	0f c0       	rjmp	.+30     	; 0x3a68 <main+0xd10>
    3a4a:	88 ec       	ldi	r24, 0xC8	; 200
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	8b 83       	std	Y+3, r24	; 0x03
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	9c 81       	ldd	r25, Y+4	; 0x04
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <main+0xcfe>
    3a5a:	9c 83       	std	Y+4, r25	; 0x04
    3a5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a60:	9e 81       	ldd	r25, Y+6	; 0x06
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	9e 83       	std	Y+6, r25	; 0x06
    3a66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a68:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	69 f7       	brne	.-38     	; 0x3a4a <main+0xcf2>
    3a70:	31 cc       	rjmp	.-1950   	; 0x32d4 <main+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a72:	6f 81       	ldd	r22, Y+7	; 0x07
    3a74:	78 85       	ldd	r23, Y+8	; 0x08
    3a76:	89 85       	ldd	r24, Y+9	; 0x09
    3a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	89 81       	ldd	r24, Y+1	; 0x01
    3a90:	9a 81       	ldd	r25, Y+2	; 0x02
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <main+0xd3a>
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	1c cc       	rjmp	.-1992   	; 0x32d4 <main+0x57c>

00003a9c <__udivmodsi4>:
    3a9c:	a1 e2       	ldi	r26, 0x21	; 33
    3a9e:	1a 2e       	mov	r1, r26
    3aa0:	aa 1b       	sub	r26, r26
    3aa2:	bb 1b       	sub	r27, r27
    3aa4:	fd 01       	movw	r30, r26
    3aa6:	0d c0       	rjmp	.+26     	; 0x3ac2 <__udivmodsi4_ep>

00003aa8 <__udivmodsi4_loop>:
    3aa8:	aa 1f       	adc	r26, r26
    3aaa:	bb 1f       	adc	r27, r27
    3aac:	ee 1f       	adc	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	a2 17       	cp	r26, r18
    3ab2:	b3 07       	cpc	r27, r19
    3ab4:	e4 07       	cpc	r30, r20
    3ab6:	f5 07       	cpc	r31, r21
    3ab8:	20 f0       	brcs	.+8      	; 0x3ac2 <__udivmodsi4_ep>
    3aba:	a2 1b       	sub	r26, r18
    3abc:	b3 0b       	sbc	r27, r19
    3abe:	e4 0b       	sbc	r30, r20
    3ac0:	f5 0b       	sbc	r31, r21

00003ac2 <__udivmodsi4_ep>:
    3ac2:	66 1f       	adc	r22, r22
    3ac4:	77 1f       	adc	r23, r23
    3ac6:	88 1f       	adc	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	1a 94       	dec	r1
    3acc:	69 f7       	brne	.-38     	; 0x3aa8 <__udivmodsi4_loop>
    3ace:	60 95       	com	r22
    3ad0:	70 95       	com	r23
    3ad2:	80 95       	com	r24
    3ad4:	90 95       	com	r25
    3ad6:	9b 01       	movw	r18, r22
    3ad8:	ac 01       	movw	r20, r24
    3ada:	bd 01       	movw	r22, r26
    3adc:	cf 01       	movw	r24, r30
    3ade:	08 95       	ret

00003ae0 <__prologue_saves__>:
    3ae0:	2f 92       	push	r2
    3ae2:	3f 92       	push	r3
    3ae4:	4f 92       	push	r4
    3ae6:	5f 92       	push	r5
    3ae8:	6f 92       	push	r6
    3aea:	7f 92       	push	r7
    3aec:	8f 92       	push	r8
    3aee:	9f 92       	push	r9
    3af0:	af 92       	push	r10
    3af2:	bf 92       	push	r11
    3af4:	cf 92       	push	r12
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	ca 1b       	sub	r28, r26
    3b0a:	db 0b       	sbc	r29, r27
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	09 94       	ijmp

00003b18 <__epilogue_restores__>:
    3b18:	2a 88       	ldd	r2, Y+18	; 0x12
    3b1a:	39 88       	ldd	r3, Y+17	; 0x11
    3b1c:	48 88       	ldd	r4, Y+16	; 0x10
    3b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b20:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b22:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b24:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b26:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b28:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b2a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b2c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b2e:	df 80       	ldd	r13, Y+7	; 0x07
    3b30:	ee 80       	ldd	r14, Y+6	; 0x06
    3b32:	fd 80       	ldd	r15, Y+5	; 0x05
    3b34:	0c 81       	ldd	r16, Y+4	; 0x04
    3b36:	1b 81       	ldd	r17, Y+3	; 0x03
    3b38:	aa 81       	ldd	r26, Y+2	; 0x02
    3b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b3c:	ce 0f       	add	r28, r30
    3b3e:	d1 1d       	adc	r29, r1
    3b40:	0f b6       	in	r0, 0x3f	; 63
    3b42:	f8 94       	cli
    3b44:	de bf       	out	0x3e, r29	; 62
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	cd bf       	out	0x3d, r28	; 61
    3b4a:	ed 01       	movw	r28, r26
    3b4c:	08 95       	ret

00003b4e <itoa>:
    3b4e:	fb 01       	movw	r30, r22
    3b50:	9f 01       	movw	r18, r30
    3b52:	e8 94       	clt
    3b54:	42 30       	cpi	r20, 0x02	; 2
    3b56:	c4 f0       	brlt	.+48     	; 0x3b88 <itoa+0x3a>
    3b58:	45 32       	cpi	r20, 0x25	; 37
    3b5a:	b4 f4       	brge	.+44     	; 0x3b88 <itoa+0x3a>
    3b5c:	4a 30       	cpi	r20, 0x0A	; 10
    3b5e:	29 f4       	brne	.+10     	; 0x3b6a <itoa+0x1c>
    3b60:	97 fb       	bst	r25, 7
    3b62:	1e f4       	brtc	.+6      	; 0x3b6a <itoa+0x1c>
    3b64:	90 95       	com	r25
    3b66:	81 95       	neg	r24
    3b68:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6a:	64 2f       	mov	r22, r20
    3b6c:	77 27       	eor	r23, r23
    3b6e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__udivmodhi4>
    3b72:	80 5d       	subi	r24, 0xD0	; 208
    3b74:	8a 33       	cpi	r24, 0x3A	; 58
    3b76:	0c f0       	brlt	.+2      	; 0x3b7a <itoa+0x2c>
    3b78:	89 5d       	subi	r24, 0xD9	; 217
    3b7a:	81 93       	st	Z+, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	a1 f7       	brne	.-24     	; 0x3b6a <itoa+0x1c>
    3b82:	16 f4       	brtc	.+4      	; 0x3b88 <itoa+0x3a>
    3b84:	5d e2       	ldi	r21, 0x2D	; 45
    3b86:	51 93       	st	Z+, r21
    3b88:	10 82       	st	Z, r1
    3b8a:	c9 01       	movw	r24, r18
    3b8c:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <strrev>

00003b90 <strrev>:
    3b90:	dc 01       	movw	r26, r24
    3b92:	fc 01       	movw	r30, r24
    3b94:	67 2f       	mov	r22, r23
    3b96:	71 91       	ld	r23, Z+
    3b98:	77 23       	and	r23, r23
    3b9a:	e1 f7       	brne	.-8      	; 0x3b94 <strrev+0x4>
    3b9c:	32 97       	sbiw	r30, 0x02	; 2
    3b9e:	04 c0       	rjmp	.+8      	; 0x3ba8 <strrev+0x18>
    3ba0:	7c 91       	ld	r23, X
    3ba2:	6d 93       	st	X+, r22
    3ba4:	70 83       	st	Z, r23
    3ba6:	62 91       	ld	r22, -Z
    3ba8:	ae 17       	cp	r26, r30
    3baa:	bf 07       	cpc	r27, r31
    3bac:	c8 f3       	brcs	.-14     	; 0x3ba0 <strrev+0x10>
    3bae:	08 95       	ret

00003bb0 <__udivmodhi4>:
    3bb0:	aa 1b       	sub	r26, r26
    3bb2:	bb 1b       	sub	r27, r27
    3bb4:	51 e1       	ldi	r21, 0x11	; 17
    3bb6:	07 c0       	rjmp	.+14     	; 0x3bc6 <__udivmodhi4_ep>

00003bb8 <__udivmodhi4_loop>:
    3bb8:	aa 1f       	adc	r26, r26
    3bba:	bb 1f       	adc	r27, r27
    3bbc:	a6 17       	cp	r26, r22
    3bbe:	b7 07       	cpc	r27, r23
    3bc0:	10 f0       	brcs	.+4      	; 0x3bc6 <__udivmodhi4_ep>
    3bc2:	a6 1b       	sub	r26, r22
    3bc4:	b7 0b       	sbc	r27, r23

00003bc6 <__udivmodhi4_ep>:
    3bc6:	88 1f       	adc	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	5a 95       	dec	r21
    3bcc:	a9 f7       	brne	.-22     	; 0x3bb8 <__udivmodhi4_loop>
    3bce:	80 95       	com	r24
    3bd0:	90 95       	com	r25
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	08 95       	ret

00003bd8 <_exit>:
    3bd8:	f8 94       	cli

00003bda <__stop_program>:
    3bda:	ff cf       	rjmp	.-2      	; 0x3bda <__stop_program>
